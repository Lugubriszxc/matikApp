<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/css/tableCss/tableStyle.css" asp-append-version="true"/>
</head>
<body>
    <center><h1>Time Index</h1></center>
    <button type="button" title="Add Time" id="createTimebtn" class="btn btn-success" style="color: #ffffff;" data-bs-toggle="modal" data-bs-target="#modalTimeCreate">
    <i class="fa-solid fa-circle-plus" style="color: #ffffff;"></i> &nbsp Add Time Slot
    </button>

    <br><br>
    @Html.Partial("PartialTime/TimeTable")
    @Html.Partial("PartialTime/TimeCreate")
    @Html.Partial("PartialTime/TimeUpdate")
</body>
</html>

<script>
    //initialize the variables here as global
    var selectedTimeId;
    var selectedTime;
    var timeList = {};

    $(document).ready(function(){

    var storedUserAuth = sessionStorage.getItem('userauth');
    var userAuth = JSON.parse(storedUserAuth);

    if(userAuth === null)
    {
        window.location.href = "/Authorization/Signin";
    }
    else if(userAuth.userType !== 'admin')
    {
        if(userAuth.userType === 'instructor')
        {
            window.location.href = "/PageInstructor/PageInstructorIndex";
        }
        else if(userAuth.userType === 'student')
        {
            window.location.href = "/PageStudent/PageStudentIndex";
        }
    }

    
    //call the functions by default
    populateTimeTable();
    //clearForm();

    function clearForm()
    {
        $("#createTimeForm")[0].reset();
        $("select").val([]);
    }

    function populateTimeTable()
    {
        $('#timeData').DataTable().destroy();
        $('#timeData').DataTable({
            responsive: true,
            ajax:
            {
                url: '../api/adminapi/getTimeSlots',
                dataSrc: ''
            },
            columns:
            [
                {data: 'timeId'},
                {
                    data: 'timeId',
                    render : function (data, type, row)
                    {
                        var valHolder = row['startTime'].toString();
                        var temp = valHolder.split(":");

                        //convert 24 hour format to 12 hour format
                        var ap = temp[0] >= 12 ? 'PM' : 'AM';

                        var hours = temp[0] % 12;
                        hours = hours ? hours : 12;

                        var minutes = temp[1].toString().padStart(2, '0');
                        var mergeTime = hours + ':' + minutes + ' ' + ap;
                        return mergeTime;
                    }
                
                },
                {
                    data: 'timeId',
                    render : function(data, type, row)
                    {
                        var valHolder = row['endTime'].toString();
                        var temp = valHolder.split(":");

                        //convert 24 hour format to 12 hour format
                        var ap = temp[0] >= 12 ? 'PM' : 'AM';

                        var hours = temp[0] % 12;
                        hours = hours ? hours : 12;

                        var minutes = temp[1].toString().padStart(2, '0');
                        var mergeTime = hours + ':' + minutes + ' ' + ap;
                        return mergeTime;
                    }
                },
                {
                    //this is for the time duration
                    //converting the time to get the time elapsed
                    data: 'timeId',
                    render : function (data, type, row)
                    {
                        var timeFrom = new Date();
                        var valHolder = row['startTime'].toString();
                        var temp = valHolder.split(":");
                        timeFrom.setHours((parseInt(temp[0]) - 1 + 24) % 24);
                        timeFrom.setMinutes(parseInt(temp[1]));

                        var timeTo = new Date();
                        var valHolder = row['endTime'].toString();
                        var temp = valHolder.split(":");
                        timeTo.setHours((parseInt(temp[0]) - 1 + 24) % 24);
                        timeTo.setMinutes(parseInt(temp[1]));

                        var timeMilli = timeTo - timeFrom;
                        var minutes = Math.floor((timeMilli / (1000*60)) % 60);
                        var hours = Math.floor((timeMilli / (1000 * 60 * 60)) % 24);

                        //grahams
                            if(hours == 0 && minutes > 1)
                            {
                                var combined = minutes + ' Minutes ';
                            }
                            else if(hours == 0 && minutes <= 1)
                            {
                                var combined = minutes + ' Minute ';
                            }
                            else if(hours > 1 && minutes == 0)
                            {
                                var combined = hours + ' Hours';
                            }
                            else if(hours <= 1 && minutes == 0)
                            {
                                var combined = hours + ' Hour';
                            }
                            else if(hours > 1 && minutes <= 1)
                            {
                                var combined = hours + ' Hours & ' + minutes + ' Minute';
                            }
                            else if(hours > 1 && minutes > 1)
                            {
                                var combined = hours + ' Hours & ' + minutes + ' Minutes';
                            }
                            else if(hours <= 1 && minutes <= 1){
                                var combined = hours + ' Hour & ' + minutes + ' Minute';
                            }
                            else if(hours <= 1 && minutes > 1){
                                var combined = hours + ' Hour & ' + minutes + ' Minutes';
                            }

                        return combined;
                    }
                },
                {   
                    //actions
                    data: 'timeId',
                    render : function (data, type, row)
                    {
                        return btnTime(data);
                    }
                },
            ]
        });

        //get the time slots
        getTimeSlots();
    }

    //to render buttons in action index
    function btnTime(timeId)
    {
        return "<center><a class='btn btn-success timeUpdate' data-timeId=" + timeId + "><i class='fa-solid fa-pen-to-square' style='color : #ffffff;'></i></a> | <a class='btn btn-danger timeDelete' data-timeId=" + timeId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //get the data of the time slot and store it to array
    function getTimeSlots()
    {
        $.ajax("../api/adminapi/getTimeSlots")
        .done(function(result){
            timeList = result;
        });
    }

    //this is to create a time and save it to the database
    $("#createTime").click((e) => {
        try{
            var arrData = {};

            //count the number of element inside the form
            var formelements = $("#createTimeForm .form-group");

            //getting the data from the form
            var formInputs = $("#createTimeForm").serializeArray();
            formInputs.forEach(function(item){
                arrData[item.name] = item.value;
            });

            let emptyEl = new Boolean(false);
            if(formInputs[0].value === '' || formInputs[1].value === '')
            {
                emptyEl = Boolean(true);
            }
            else
            {
                emptyEl = Boolean(false);
            }


            //converting the time to compare
            var timeFrom = new Date();
            var temp = $('#inputStartTime').val().split(":");
            timeFrom.setHours((parseInt(temp[0]) - 1 + 24) % 24);
            timeFrom.setMinutes(parseInt(temp[1]));

            var timeTo = new Date();
            var temp = $('#inputEndTime').val().split(":");
            timeTo.setHours((parseInt(temp[0]) - 1 + 24) % 24);
            timeTo.setMinutes(parseInt(temp[1]));
            
            if(formInputs.length === formelements.length && emptyEl === Boolean(false))
            {
                console.log('Start time : ' + timeFrom);
            console.log('End time : ' + timeTo);
                if(timeFrom < timeTo)
                {
                    //Call API to add time slot
                    $.ajax({
                    url: "../api/adminapi/createTimeSlot",
                    type: "POST",
                    data:
                    {
                        ts : arrData,
                    },
                    })
                    .done(function(result){

                        if(result === undefined)
                            result = null;

                        if(result.length <= 0 || result === null)
                        {
                            //clearForm();
                            $("#modalTimeCreate").modal("toggle");
                            alertSuccess();
                            populateTimeTable();
                        }
                        else
                        {
                            alertError("Already added this time slot");
                        }
                    });
                }
                else
                {
                    alertError("Start time should be smaller than end time!");
                }
            }
            else
            {
                alertError("Input the necessary elements!");
            }
        }
        catch(err){
            alertError("Input the necessary elements");
        }
    });

    //when clicking the delete button
    $("tbody").delegate(".timeDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-timeId");
        if(i != null)
        {
            //Insert code here for delete
            selectedTimeId = i;
            alertDeleteConfirmation(selectedTimeId);
        }
    });

    //after confirming delete, call this function
    function deleteTime(selectedTimeId)
    {
        //AJAX delete time
        $.ajax({
            url: "../api/adminapi/deleteTimeSlot",
            type: "POST",
            data:
            {
                timeId : selectedTimeId,
            },
        }).done(function(){
            alertSuccess();
            populateTimeTable();
        })
    }

    //when clicking the update button
    $("tbody").delegate(".timeUpdate", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-timeId");
        if(i != null)
        {
            $("#createTimeForm")[0].reset();
            $("#modalTimeUpdate").modal("toggle");

            selectedTimeId = i;
            selectedTime = timeList.find(element => element.timeId == i);

            oFormObject = document.forms["updateTimeForm"];
            initForm(oFormObject, selectedTime);
        }
    });

    function initForm(form, data)
    {
        //for day selection
        $("select").val(data.day);

        //for the start time 
        $('.inputStartTime').val(data.startTime);

        //for the end time
        $('.inputEndTime').val(data.endTime);
    }

    //when clicking update
    $("#updateTime").click(function(){
        alertSaveChanges();
    });

    //after confirming the update
    function proceedUpdate()
    {
        var arrData = {};

        //count the number of element inside the form
        var formelements = $("#updateTimeForm .form-group");

        //getting the data from the form
        var formInputs = $("#updateTimeForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        arrData.timeId = selectedTimeId;

        let emptyEl = new Boolean(false);
        if(formInputs[0].value === '' || formInputs[1].value === '')
        {
            emptyEl = Boolean(true);
        }
        else
        {
            emptyEl = Boolean(false);
        }

        //converting the time to compare
        var timeFrom = new Date();
        var temp = $('.inputStartTime').val().split(":");
        timeFrom.setHours((parseInt(temp[0]) - 1 + 24) % 24);
        timeFrom.setMinutes(parseInt(temp[1]));

        var timeTo = new Date();
        var temp = $('.inputEndTime').val().split(":");
        timeTo.setHours((parseInt(temp[0]) - 1 + 24) % 24);
        timeTo.setMinutes(parseInt(temp[1]));

        if(formInputs.length === formelements.length && emptyEl === Boolean(false))
        {
            if(timeFrom < timeTo)
            {
                //Call API to update time slot
                $.ajax({
                url: "../api/adminapi/updateTimeSlot",
                type: "POST",
                data:
                {
                    ts : arrData,
                },
                })
                .done(function(){
                    //clearForm();
                    $("#modalTimeUpdate").modal("toggle");
                    alertSuccess();
                    populateTimeTable();
                });
            }
            else
            {
                alertError("Start time should be smaller than end time!");
            }
        }
        else
        {
            alertError("Input the necessary elements!");
        }
    }

    //upon closing the modal create
    $("#modalTimeCreateClose").click(function(){
        //defaultClear();
    });

    //upon opening of create modal
    $("#createTimebtn").click((e) => {
        //defaultClear();
    });

    function defaultClear()
    {
        $("#createTimeForm")[0].reset();
        $("#updateTimeForm")[0].reset();
        $("select").val([]);
    }

    //sweet alert
    //display error alert
    function alertError(message)
    {
        Swal.fire({
            icon: 'error',
            title: 'Error occured',
            text: message,
        })
    }

    //display success action
    function alertSuccess()
    {
        Swal.fire({
            icon: 'success',
            title: 'Your work has been saved', 
            showConfirmButton: false,
            timer: 1500
        })
    }

    //display update confirmation
    function alertSaveChanges()
    {
        Swal.fire({
            title: 'Do you want to save the changes?',
            showCancelButton: true,
            confirmButtonText: 'Save',
        }).then((result) => {
            if(result.isConfirmed){
                proceedUpdate();
            }
        })
    }

    //display delete confirmation
    function alertDeleteConfirmation(selectedTimeId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteTime(selectedTimeId);
            }
        })
    }


    //CLEAR UPON CLOSING
    function clearForm(){
        $("#createTimeForm")[0].reset();
        //to deselect a selected option
        $("select").val([]);
    }

    $("#modalTimeCreateClose").click(function(){
        //clearForm();
    });

    }); //end of document.ready
</script>