<center>
    <h1>Instructor</h1>
</center>

<button type="button" title="Create Instructor" id="createInstructorbtn" class="btn btn-success" style="color: #ffffff;" data-bs-toggle="modal" data-bs-target="#modalInstructorCreate">
  <i class="fa-solid fa-circle-plus" style="color: #ffffff;"></i> &nbsp Create Instructor
</button>

<br><br>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/css/tableCss/tableStyle.css" asp-append-version="true"/>
</head>
<body>
    <!--Import the partials here-->
    @Html.Partial("PartialInstructor/InstructorTable")
    @Html.Partial("PartialInstructor/InstructorCreate")
    @Html.Partial("PartialInstructor/InstructorUpdate")
    @Html.Partial("PartialInstructor/InstructorTimePeriod")
    @Html.Partial("PartialInstructor/InstructorTableUAPeriod")
    @Html.Partial("PartialInstructor/InstructorSHTable")
    @Html.Partial("PartialInstructor/InstructorAddSubjectHandled")
    @Html.Partial("PartialInstructor/InstructorUnitLoad")
    @Html.Partial("PartialInstructor/InstructorAddUnitLoad")
</body>
</html>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    //initialize the variables here as global
    var selectedInstructorId;
    var selectedInstructor;
    var instructorList = {};

    var selectedIAUId;
    var selectedUAId;
    var selectedSubjectId;
    var selectedSubjectHandledId;
    //var timeSlotList = {};

    $(document).ready(function(){
    
    var storedUserAuth = sessionStorage.getItem('userauth');
    var userAuth = JSON.parse(storedUserAuth);

    if(userAuth === null)
    {
        window.location.href = "/Authorization/Signin";
    }
    else if(userAuth.userType !== 'admin')
    {
        if(userAuth.userType === 'instructor')
        {
            window.location.href = "/PageInstructor/PageInstructorIndex";
        }
    }

    //call for the functions by default
    populateDepartment();
    populateInstructorTable();
    populateTimePeriod();
    populateAcademicYear();

    //to populate the department option 
    function populateDepartment()
    {
        $.ajax("../api/adminapi/getDepartment")
        .done(function(result){
        //console.log(result);
        var template = document.querySelector("template#departmentOptionTemplate");
        var parent = document.querySelectorAll("#departmentSelect");
        
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.departmentId;
            cloned.querySelector("option").innerText= item.departmentName;

            parent[i].prepend(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    //to populate the time period
    function populateTimePeriod()
    {
        $.ajax("../api/adminapi/getTimeSlots")
        .done(function(result){
        var template = document.querySelector("template#timeOptionTemplate");
        var parent = document.querySelectorAll("#periodSelect");
        
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.timeId;
            cloned.querySelector("option").innerText = item.startTime + " : " + item.endTime;

            parent[i].prepend(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    //to populate the instructor table
    function populateInstructorTable()
    {
        $('#instructorData').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#instructorData'))
        {
            $('#instructorData').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getInstructorDep',
                    dataSrc: '',
                },
                columns:
                [
                    {data: 'instructorId'},
                    {
                        data: 'instructorId',
                        render : function(data, type, row)
                        {
                            var firstname = row['instructorFname'];
                            var middlename = row['instructorMname'];
                            var lastname = row['instructorLname'];

                            var combined;

                            if(middlename.value === "")
                            {
                                combined = firstname + ' ' + lastname;
                            }
                            else
                            {
                                combined = firstname + ' ' + middlename + ' ' + lastname; 
                            }

                            return combined;
                        }
                    },
                    {data: 'departmentName'},
                    @* {
                        data: 'day',
                        render : function(data, type, row)
                        {
                            var days = row['day'];

                            if(Array.isArray(days))
                            {
                                return days.join(', ');
                            }
                            else
                            {
                                return days;
                            }
                        } 

                         data: 'instructorId',
                        render : function(data, type, row)
                        {
                            //var test = timeSlotList;
                            //console.log(test);
                            var test = timeSlotList;
                            console.log(test);
                            timeSlotList.forEach(function(hello){
                                return hello.timeId;
                            });
                        } 
                        data: 'instructorId',
                    }, *@
                    {
                        data: 'instructorId',
                        render : function (data, type, row)
                        {
                            return btnInstructor(data);
                        }
                    },
                ]
            });
        }
        //get the instructors list 
        getInstructor();
    }

    //to render buttons in action index
    function btnInstructor(instructorId)
    {
        return "<center> <a class='btn btn-primary unitLoad' title='Unit Load' data-instructorId=" + instructorId + "><i class='fa-solid fa-book-open-reader'></i></a> | <a class='btn btn-warning subjectHandled' title='Subjects handled' data-instructorId=" + instructorId + "><i class='fa-solid fa-book-open' style='color : #213454;'></i></a> | <a class='btn btn-warning unavailablePeriod' title='Unavailable time period' data-instructorId=" + instructorId + "><i class='fa-solid fa-business-time' style='color : #213454;'></i></a> | <a class='btn btn-success instructorUpdate' data-instructorId=" + instructorId + "><i class='fa-solid fa-pen-to-square' style='color : #ffffff;'></i></a> | <a class='btn btn-danger instructorDelete' data-instructorId=" + instructorId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //get the data of the instructor and store it to array
    function getInstructor()
    {
        $.ajax("../api/adminapi/getInstructors")
        .done(function(result){
            instructorList = result;
        });
    }

    @* //get the data of the unavailable time slots and store it to array
    function getTimeSlots()
    {
        $.ajax("../api/adminapi/getUnavailableTimePeriod")
        .done(function(result){
            timeSlotList = result;
        });
    } *@

    //this is to create a instructor and save it to the database
    $("#createInstructor").click((e) => {
        var arrData = {};

        //count the number of element inside the form
        var formelements = $("#createInstructorForm .form-group");

        //getting the data from the form
        var formInputs = $("#createInstructorForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        //console.log(arrData);

        let emptyEl = new Boolean(false);
        //alternative of bool
        if(formInputs[0].value === '' || formInputs[2].value === '')
        {
            //if the firstname or lastname are empty then return true or 0
            emptyEl = Boolean(true);
        }
        else{
            //if the firstname and lastname are not empty then return false or 1
            emptyEl = Boolean(false);
        }

        //if all elements are not empty
        if(formInputs.length === formelements.length && emptyEl ===  Boolean(false))
        {

            //Call API to add Instructor
            $.ajax({
                url: "../api/adminapi/createInstructor",
                type: "POST",
                data:
                {
                    i : arrData,
                },
            })
            .done(function(){
                $("#createInstructorForm")[0].reset();
                $("#modalInstructorCreate").modal("toggle");
                alertSuccess();
                populateInstructorTable();
            });
        }
        else   
        {
            alertError("Input the necessary elements!");
        }

    });

    //when clicking the delete button
    $("tbody").delegate(".instructorDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-instructorId");
        if(i != null)
        {
            //Insert code here for delete
            selectedInstructorId = i;
            alertDeleteConfirmation(selectedInstructorId);
        }
    });

    //after confirming delete, call this function
    function deleteInstructor(selectedInstructorId)
    {
        //AJAX delete instructor
        $.ajax({
            url: "../api/adminapi/deleteInstructor",
            type: "POST",
            data:
            {
                instructorId : selectedInstructorId,
            },
        }).done(function(){
            alertSuccess();
            populateInstructorTable();
        })
    }

    //when clicking the time period button it will open the table
    $("tbody").delegate(".unavailablePeriod", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-instructorId");
        if(i != null)
        {
            // $("#createTimePeriodForm")[0].reset();
            //$("#modalTimePeriodCreate").modal("toggle");

            $("#modalUnavailablePeriodTable").modal("toggle");

            //to deselect a selected option
            //$("select").val([]);

            selectedInstructorId = i;
            //selectedInstructor = instructorList.find(element => element.instructorId == i);

            populateUnavailableTimePeriod(selectedInstructorId);
        }
    });

    //when clicking the subjects handled button it will open the table
    $("tbody").delegate(".subjectHandled", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-instructorId");
        if(i != null)
        {
            $("#modalSubjectHandledTable").modal("toggle");
            selectedInstructorId = i;
            populateSubjectHandled(selectedInstructorId);
        }
    });

    //populating the subjects handled
    function populateSubjectHandled(selectedInstructorId)
    {
        $('#subjectHandledTable').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#subjectHandledTable'))
        {
            $('#subjectHandledTable').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getSubjectHandlePeriod',
                    data:
                    {
                        instructorId : selectedInstructorId,
                    },
                    dataSrc: '',
                },
                columns:
                [
                    {data: 'shId'},
                    {data: 'subjectCode'},
                    {data: 'subjectName'},
                    {data: 'subjectUnit'},
                    {
                        data: 'shId',
                        render : function (data, type, row)
                        {
                            return btnSH(data);
                        }
                    },
                ]
            });
        }
    }

    function btnSH(shId)
    {
        return "<center><a class='btn btn-danger subjectHandledDelete' data-shId=" + shId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //when clicking the delete of subject handled button
    $("tbody").delegate(".subjectHandledDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-shId");
        if(i != null)
        {
            //i is the value of subject handled
            selectedSubjectHandledId = i;
            alertDeleteConfirmationSubjectHandled(selectedSubjectHandledId);
        }
    });

    //after confirming the delete warning
    function deleteSubjectHandled(selectedSubjectHandledId)
    {
        //AJAX delete unavailable time slot
        $.ajax({
            url: "../api/adminapi/deleteSubjectHandled",
            type: "POST",
            data:
            {
                shId : selectedSubjectHandledId,
            },
        }).done(function(){
            alertSuccess();
            populateInstructorTable();
            populateSubjectHandled(selectedInstructorId);
        })
    }

    //after clicking add subject handled button
    $("#sHAdd").click(function(){
        populateSubjectTable();
    });

    //UNIT LOAD
    //when clicking the subjects handled button it will open the table
    $("tbody").delegate(".unitLoad", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-instructorId");
        if(i != null)
        {
            $("#modalAddUnitLoadTable").modal("toggle");
            selectedInstructorId = i;
            populateUnitLoadTable(selectedInstructorId);
            //populateSubjectHandled(selectedInstructorId);
            //console.log(selectedInstructorId);
        }
    });


    //populate subject table
    function populateUnitLoadTable()
    {
        $('#addUnitLoadTable').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#addUnitLoadTable'))
        {
            $('#addUnitLoadTable').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getUnitLoad',
                    data:
                    {
                        instructorId : selectedInstructorId,
                    },
                    dataSrc: ''
                },
                columns:
                [
                    {data: 'acadYearName'},
                    {data: 'semester'},
                    {data: 'unitLoad'},
                    {   //actions
                        data: 'unitLoadId',
                        render : function (data, type, row)
                        {
                            return btnUnitLoad(data);
                        }
                    },
                ]
            });
        }
    }

    function btnUnitLoad(unitLoadId)
    {
        return "<center><a class='btn btn-danger unitLoadDelete' data-iauId=" + unitLoadId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //to populate the academic year
    function populateAcademicYear()
    {
        $.ajax("../api/adminapi/getAcademicYear")
        .done(function(result){
        var template = document.querySelector("template#academicYearTemplate");
        var parent = document.querySelectorAll("#acadYearSelect");
        
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.acadYearId;
            cloned.querySelector("option").innerText = item.acadYearName;

            parent[i].prepend(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    //this for deleting the unit load
    $("tbody").delegate(".unitLoadDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-iauId");
        if(i != null)
        {
            //Code here for deleting the time slot
            selectedIAUId = i;
            console.log(selectedIAUId);
            alertInstructorUnitLoadDelete(selectedIAUId);
        }
    });
    

    //populate subject table
    function populateSubjectTable()
    {
        $('#addSubjectHandledTable').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#addSubjectHandledTable'))
        {
            $('#addSubjectHandledTable').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getSubjects',
                    dataSrc: ''
                },
                columns:
                [
                    {data: 'subjectCode'},
                    {data: 'subjectName'},
                    {data: 'subjectUnit'},
                    {   //actions
                        data: 'subjectId',
                        render : function (data, type, row)
                        {
                            return btnSubject(data);
                        }
                    },
                ]
            });
        }
    }

    //subjects add
    function btnSubject(subjectId)
    {
        return "<center><a class='btn btn-primary createSubjectHandled' data-subjectId=" + subjectId + "><i class='fa-solid fa-plus' style='color : #ffffff;'></i></a></center>"
    }

    //this for adding the subjects
    $("tbody").delegate(".createSubjectHandled", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-subjectId");
        if(i != null)
        {
            //Code here for adding the subject
            selectedSubjectId = i;
            alertAddSubject();
        }
    });

    function proceedAddSubject()
    {
        const myArray = {
            instructorId: selectedInstructorId,
            subjectId: selectedSubjectId,
        };

        $.ajax({
                url: "../api/adminapi/checkSubjectHandled",
                type: "POST",
                data:
                {
                    sh : myArray,
                },
            })
            .done(function(result){
                //this means if there is no identical subject
                if(result == null)
                {
                    $.ajax({
                    url: "../api/adminapi/addSubjectHandled",
                    type: "POST",
                    data:
                    {
                        sh : myArray,
                    },
                    })
                    .done(function(){
                        $("#modalAddSubjectHandledTable").modal("toggle");
                        alertSuccess();
                        populateSubjectHandled(selectedInstructorId);
                    });
                }
                else
                {
                    alertError("There is already a designated subject for this instructor");
                }
            });
    }

    function populateUnavailableTimePeriod(selectedInstructorId)
    {
        $('#unavailablePeriodTable').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#unavailablePeriodTable'))
        {
            $('#unavailablePeriodTable').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getUnavailableTimePeriod',
                    data:
                    {
                        instructorId : selectedInstructorId,
                    },
                    dataSrc: '',
                },
                columns:
                [
                    {data: 'uaId'},
                    {
                        data: 'uaId',
                        render : function (data, type, row)
                        {
                            //this is for the start time
                            var valHolder = row['startTime'].toString();
                            var temp = valHolder.split(":");

                            //convert 24 hour format to 12 hour format
                            var ap = temp[0] >= 12 ? 'PM' : 'AM';

                            var hours = temp[0] % 12;
                            hours = hours ? hours : 12;

                            var minutes = temp[1].toString().padStart(2, '0');
                            var mergeTimeStartTime = hours + ':' + minutes + ' ' + ap;
                            
                            //this is for the end time
                            var valHolder = row['endTime'].toString();
                            var temp = valHolder.split(":");

                            //convert 24 hour format to 12 hour format
                            var ap = temp[0] >= 12 ? 'PM' : 'AM';

                            var hours = temp[0] % 12;
                            hours = hours ? hours : 12;

                            var minutes = temp[1].toString().padStart(2, '0');
                            var mergeTimeEndTime = hours + ':' + minutes + ' ' + ap;

                            return row['day'] + ", " + mergeTimeStartTime + " : " + mergeTimeEndTime; 
                        }
                    },
                    {
                        data: 'uaId',
                        render : function (data, type, row)
                        {
                            return btnUAPeriod(data);
                        }
                    },
                ]
            });
        }
    }

    function btnUAPeriod(uaId)
    {
        return "<center><a class='btn btn-danger uaPeriodDelete' data-uaId=" + uaId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //this for deleting the unavailable timeslot
    $("tbody").delegate(".uaPeriodDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-uaId");
        if(i != null)
        {
            //Code here for deleting the time slot
            selectedUAId = i;
            alertDeleteUATime(selectedUAId);
        }
    });

    //after confirming delete time slot, call this function
    function deleteUATime(selectedUAId)
    {
        console.log(selectedUAId);
        //AJAX delete unavailable time slot
        $.ajax({
            url: "../api/adminapi/deleteUATime",
            type: "POST",
            data:
            {
                uaId : selectedUAId,
            },
        }).done(function(){
            alertSuccess();
            populateInstructorTable();
            $("#modalUnavailablePeriodTable").modal("toggle");
            populateUnavailableTimePeriod(selectedInstructorId);
        })
    }

    //after confirming deleting the unit load, call this function
    function deleteInstructorLoad(selectedIAUId)
    {
        //ajax delete instructor load 
        $.ajax({
            url: "../api/adminapi/deleteInstructorLoad",
            type: "POST",
            data:
            {
                IAUId : selectedIAUId,
            },
        }).done(function(){ 
            alertSuccess();
            //populateInstructorTable();
           //$("#modalUnavailablePeriodTable").modal("toggle");
            populateUnitLoadTable(selectedInstructorId);
        })
    }

    //when clicking add unavailable time period
    $("#uPAdd").click(function(){
        $("#modalUnavailablePeriodTable").modal("toggle");
        $("#modalTimePeriodCreate").modal("toggle");
    });

    //after clicking create time period
    $("#createTimePeriod").click(function(){
        addTimePeriod();
    });

    //after clicking create time period
    $("#createUnitLoad").click(function(){
        addUnitLoad();
    });
    
    function addUnitLoad()
    {
        //count the number of elements inside  the form
        var formelements = $("#createUnitLoadForm .form-group");

        var arrData = {};
        //getting the data from the form
        var formInputs = $("#createUnitLoadForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        arrData.InstructorId = selectedInstructorId;

        let valUnitLoad = document.getElementById('loadUnit');

        console.log(formelements.length);
        if(formInputs.length === formelements.length && valUnitLoad !== '')
        {
            //Call API to add unit load
            $.ajax({
                url: "../api/adminapi/checkInstructorLoad",
                type: "POST",
                data:
                {
                    iul : arrData,
                },
            })
            .done(function(result){
                if(result == null)
                {
                    $.ajax({
                        url: "../api/adminapi/createInstructorLoad",
                        type: "POST",
                        data:
                        {
                            iul : arrData,
                        },
                    })
                    .done(function(){
                        //$("#createUnitLoadForm")[0].reset();
                        $("#modalUnitLoadCreate").modal("toggle");
                        alertSuccess();
                        populateUnitLoadTable(selectedInstructorId);
                        //populateInstructorTable();
                    });
                }
                else
                {
                    alertError("Instructor is already registered.");
                }
            });

            
        }
        else
        {
            alertError("Select a time period!");
        }
    }

    //adding a time period to the unavailableperiod table with the instructor id
    function addTimePeriod()
    {
        //count the number of elements inside  the form
        var formelements = $("#createTimePeriodForm .form-group");

        var arrData = {};
        //getting the data from the form
        var formInputs = $("#createTimePeriodForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        arrData.InstructorId = selectedInstructorId;

        console.log(formelements.length);
        if(formInputs.length === formelements.length)
        {
            console.log(arrData);
            //Call API to add unavailable time period
            $.ajax({
                url: "../api/adminapi/createUnavailablePeriod",
                type: "POST",
                data:
                {
                    up : arrData,
                },
            })
            .done(function(){
                $("#createTimePeriodForm")[0].reset();
                $("#modalTimePeriodCreate").modal("toggle");
                alertSuccess();
                populateInstructorTable();
            });
        }
        else
        {
            alertError("Select a time period!");
        }
    }

    //when clicking the update button
    $("tbody").delegate(".instructorUpdate", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-instructorId");
        if(i != null)
        {
            $("#createInstructorForm")[0].reset();
            $("#modalInstructorUpdate").modal("toggle");

            selectedInstructorId = i;
            selectedInstructor = instructorList.find(element => element.instructorId == i);

            oFormObject = document.forms["updateInstructorForm"];
            initForm(oFormObject, selectedInstructor);
        }
    });

    //to populate the selected element to the form
    function initForm(form, data){
        Object.getOwnPropertyNames(data).forEach(function(item){
        var currentElem = form.elements[item.charAt(0).toUpperCase() + item.slice(1)];
        //console.log(currentElem);
        console.log(currentElem);

        if( currentElem == null ){return;}

        if(currentElem.tagName == "SELECT"){
            var selectChildren = Array.from(currentElem.children);
            var matchedOpt = selectChildren.find(opt => opt.value == selectedInstructor.departmentId);
        if(matchedOpt){
            matchedOpt.selected = true;
        }
        }else{
            form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value",data[item]); 
        }
        });
    }

    //after clicking update
    $("#updateInstructor").click(function(){
        alertSaveChanges();
    });

    function proceedUpdate()
    {
        var arrData = {};

        //count the number of elements inside  the form
        var formelements = $("#updateInstructorForm .form-group");

        //getting the data from the form
        var formInputs = $("#updateInstructorForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        arrData.instructorId = selectedInstructorId;

        let emptyEl = new Boolean(false);
        //alternative of bool
        if(formInputs[0].value === '' || formInputs[2].value === '')
        {
            //if the firstname or lastname are empty then return true or 0
            emptyEl = Boolean(true);
        }
        else{
            //if the firstname and lastname are not empty then return false or 1
            emptyEl = Boolean(false);
        }

        //if all elements are not empty
        if(formInputs.length === formelements.length && emptyEl ===  Boolean(false))
        {
            //Call API to add Instructor
            $.ajax({
                url: "../api/adminapi/updateInstructor",
                type: "POST",
                data:
                {
                    i : arrData,
                },
            })
            .done(function(){
                $("#updateInstructorForm")[0].reset();
                $("#modalInstructorUpdate").modal("toggle");
                alertSuccess();
                populateInstructorTable();
            });
        }
        else   
        {
            alertError("Input the necessary elements!");
        }
    }

    //upon closing the modal create
    $("#modalInstructorCreateClose").click(function(){
        defaultClear();
    });

    $("#createInstructorbtn").click((e) => {
        defaultClear();
    });

    function defaultClear()
    {
        $("#createInstructorForm")[0].reset();
        $("#updateInstructorForm")[0].reset();
        $("select").val([]);
    }


    //sweet alert
    //display error alert
    function alertError(message)
    {
        Swal.fire({
            icon: 'error',
            title: 'Error occured',
            text: message,
        })
    }

    //display success action
    function alertSuccess()
    {
        Swal.fire({
            icon: 'success',
            title: 'Your work has been saved', 
            showConfirmButton: false,
            timer: 1500
        })
    }

    //display delete confirmation
    function alertDeleteConfirmation(selectedInstructorId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteInstructor(selectedInstructorId);
            }
        })
    }

    //display delete confirmation of subject handled
    function alertDeleteConfirmationSubjectHandled(selectedSubjectHandledId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteSubjectHandled(selectedSubjectHandledId);
            }
        })
    }

    //display delete confirmation of unavailable time slot
    function alertDeleteUATime(selectedUAId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteUATime(selectedUAId);
            }
        })
    }

    //display delete confirmation of unavailable time slot
    function alertInstructorUnitLoadDelete(selectedIAUId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteInstructorLoad(selectedIAUId);
            }
        })
    }

    //display update confirmation
    function alertSaveChanges()
    {
        Swal.fire({
            title: 'Do you want to save the changes?',
            showCancelButton: true,
            confirmButtonText: 'Save',
        }).then((result) => {
            if(result.isConfirmed){
                proceedUpdate();
            }
        })
    }

    //display add confirmation
    function alertAddSubject()
    {
        Swal.fire({
            title: 'Do you want to add this subject?',
            showCancelButton: true,
            confirmButtonText: 'Save',
        }).then((result) => {
            if(result.isConfirmed){
                proceedAddSubject();
            }
        })
    }

    });//document.ready
</script>