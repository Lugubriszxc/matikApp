<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.0/package/dist/xlsx.full.min.js"></script>
</head>

<body>
    <template id="academicYearTemplate">
        <option value=""></option>
    </template>
    <center>
        <h1>Generate Class Schedules</h1>
    </center>
    @Html.Partial("PartialGenerateSchedule/BacklogFile/Backlogs")
    @Html.Partial("PartialGenerateSchedule/BacklogFile/InstructorBacklogs")
    @Html.Partial("PartialGenerateSchedule/BacklogFile/SectionBacklogs")
    <center>
        <div id="formDiv">
            <form id="createRegisSectionForm">
                <div class="form-group">
                    <label name="" class="control-label">Academic Year</label>
                    <select id="acadYearSelect" name="AcadYearID" class="form-select"></select>
                </div>
                <div class="form-group">
                    <label name="" class="control-label">Semester</label>
                    <select id="semesterSelect" name="Semester" class="form-select">
                        <option value="1st Semester">1st Semester</option>
                        <option value="2nd Semester">2nd Semester</option>
                        <option value="Summer">Summer</option>
                    </select>
                </div>
            </form>
            <button type="button" class="btn btn-success mods" id="generateSchedBtn" disabled>Generate Schedule</button>
            <button type="button" class="btn btn-warning mods" id="viewBacklogsBtn" disabled>Open Backlogs</button>
        </div>
    </center>
</body>

</html>

<script>

    var GeneratedSched = {};

    var Departments = {};
    var Rooms = {};
    var Courses = {};
    var Instructors = {};
    var Unavailableperiods = {};
    var Assignsubjects = {};
    var Subjects = {};
    var Subjecthandleds = {};
    var Sections = {};
    var Regissections = {};
    var Timeslots = {};
    var AcadYears = {};

    var acadVal = "";
    var semesterVal = "";

    let timerValue = 0;
    let timerMinute = 0;

    let timerVal = 0;
    let timerMin = 0;

    let timerInterval;

    let isExist = false;

    $(document).ready(function () {

        var storedUserAuth = sessionStorage.getItem('userauth');
        var userAuth = JSON.parse(storedUserAuth);

        if (userAuth === null) {
            window.location.href = "/Authorization/Signin";
        }
        else if (userAuth.userType !== 'admin') {
            if (userAuth.userType === 'instructor') {
                window.location.href = "/PageInstructor/PageInstructorIndex";
            }
            else if (userAuth.userType === 'student') {
                window.location.href = "/PageStudent/PageStudentIndex";
            }
        }

        //this is just for testing the button
        activateButton();
        populateAcademicYear();
        getData();
        checkEmptySelect();

        function checkEmptySelect() {
            if ($('#acadYearSelect').val() == null || $('#semesterSelect').val() == null) {
                document.getElementById('generateSchedBtn').disabled = true;
            }
            else {
                document.getElementById('generateSchedBtn').disabled = false;
            }
        }

        //underConstruction

        function checkRoomSchedule(acadYearId, semester) {
            try {
                $.ajax({
                    url: "../api/adminapi/getRoomSchedule",
                    type: "POST",
                    data:
                    {
                        acadYearId: acadYearId,
                        semester: semester
                    },
                }).done(function (result) {
                    console.log(result);
                    if (result.length === 0 || result === null) {
                        isExist = false;
                        document.getElementById('viewBacklogsBtn').disabled = true;
                    }
                    else {
                        isExist = true;
                        document.getElementById('viewBacklogsBtn').disabled = false;
                        acadVal = acadYearId;
                        semesterVal = semester;

                        getInstructorBacklog(acadYearId, semester);
                        getSectionBacklog(acadYearId, semester);
                    }
                })
            } catch (error) {
                console.log(error);
            }
        }

        function getInstructorBacklog(acadVal, semesterVal) {
            $.ajax({
                url: "../api/schedulebacklogsapi/instructorBacklogs",
                type: "POST",
                data:
                {
                    acadVal: acadVal,
                    semesterVal: semesterVal
                },
            }).done(function (result) {
                var parent = document.querySelector(".parentInstructorBacklogs");
                parent.innerHTML = '';

                if (result.length === 0 || result === null) {
                    isExist = false;

                    //Doesn't have any backlogs
                    $("#instructorBacklogsBtn").removeClass("btn-primary").addClass("btn-success");

                    //Setting up as empty
                    var template = document.querySelector("template#card-cardInstructor");
                    var parent = document.querySelector(".parentInstructorBacklogs");
                    var cloned = template.content.cloneNode(true);

                    cloned.querySelector(".instructorBacklogsTemp").innerHTML = "<hr> No backlogs recorded.";
                    //cloned.find('.stockHis').remove();

                    parent.prepend(cloned);
                }
                else {
                    $("#instructorBacklogVal").text(result.length);
                    $("#instructorBacklogsBtn").removeClass("btn-primary").addClass("btn-warning");

                    //Setting up the logs for the instructor
                    result.forEach(function (item, index) {
                        var template = document.querySelector("template#card-cardInstructor");
                        var parent = document.querySelector(".parentInstructorBacklogs");
                        var cloned = template.content.cloneNode(true);

                        cloned.querySelector(".instructorBacklogsTemp").innerHTML = index + 1 + ". " + item.instructorName;

                        parent.append(cloned);
                    });
                }
            })
        }

        function getSectionBacklog(acadVal, semesterVal) {
            $.ajax({
                url: "../api/schedulebacklogsapi/classBacklogs",
                type: "POST",
                data:
                {
                    acadVal: acadVal,
                    semesterVal: semesterVal
                },
            }).done(function (result) {
                var parent = document.querySelector(".parentSectionBacklogs");
                parent.innerHTML = '';

                if (result.length === 0 || result === null) {
                    isExist = false;

                    //Doesn't have any backlogs
                    $("#sectionBacklogsBtn").removeClass("btn-primary").addClass("btn-success");

                    //Setting up as empty
                    var template = document.querySelector("template#card-cardSection");
                    var parent = document.querySelector(".parentSectionBacklogs");
                    var cloned = template.content.cloneNode(true);

                    cloned.querySelector(".sectionBacklogsTemp").innerHTML = "<hr> No backlogs recorded.";
                    //cloned.find('.stockHis').remove();

                    parent.prepend(cloned);
                }
                else {
                    $("#sectionBacklogVal").text(result.length);
                    $("#sectionBacklogsBtn").removeClass("btn-primary").addClass("btn-warning");

                    //Setting up the logs for the instructor
                    result.forEach(function (item, index) {
                        var template = document.querySelector("template#card-cardSection");
                        var parent = document.querySelector(".parentSectionBacklogs");
                        var cloned = template.content.cloneNode(true);

                        cloned.querySelector(".sectionBacklogsTemp").innerHTML = index + 1 + ". " + item.sectionName;

                        parent.append(cloned);
                    });
                }
            })
        }

        //Make a select checker here instead of interval checkGenerate
        //get the select action when selecting an option
        $("#acadYearSelect").change(function () {
            //after selection, get the department ID and compare it to existing course list
            if ($('#acadYearSelect').val() == null || $('#semesterSelect').val() == null) {
                document.getElementById('generateSchedBtn').disabled = true;
            }
            else {
                document.getElementById('generateSchedBtn').disabled = false;
                checkRoomSchedule($('#acadYearSelect').val(), $('#semesterSelect').val());
            }
        });

        $("#semesterSelect").change(function () {
            //after selection, get the department ID and compare it to existing course list
            if ($('#acadYearSelect').val() == null || $('#semesterSelect').val() == null) {
                document.getElementById('generateSchedBtn').disabled = true;
            }
            else {
                document.getElementById('generateSchedBtn').disabled = false;
                checkRoomSchedule($('#acadYearSelect').val(), $('#semesterSelect').val());
            }
        });

        $("#viewBacklogsBtn").click(function () {
            $("#modalBacklogs").modal("toggle");
        });

        //instructorBacklogsBtn
        $("#instructorBacklogsBtn").click(function () {
            $("#modalInstructorBacklogs").modal("toggle");
        });

        //sectionBacklogsBtn
        $("#sectionBacklogsBtn").click(function () {
            $("#modalSectionBacklogs").modal("toggle");
        });

        function getData() {
            $.ajax("../api/adminapi/getDepartment").done(function (result) {
                Departments = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getRooms").done(function (result) {
                Rooms = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getCourse").done(function (result) {
                Courses = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getInstructors").done(function (result) {
                Instructors = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getUnavailableperiods").done(function (result) {
                Unavailableperiods = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getAssignsubjects").done(function (result) {
                Assignsubjects = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getSubjects").done(function (result) {
                Subjects = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getSubjecthandleds").done(function (result) {
                Subjecthandleds = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getSections").done(function (result) {
                Sections = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getRegissections").done(function (result) {
                Regissections = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getTimeSlots").done(function (result) {
                Timeslots = result;
                console.log(result);
            });

            $.ajax("../api/adminapi/getAcademicYear").done(function (result) {
                AcadYears = result;
                console.log(result);
            });
        }

        //for header
        const headerData = {
            "COURSE NO.": "COURSE NO.",
            "DESCRIPTIVE TITLE": "DESCRIPTIVE TITLE",
            "UNITS": "UNITS",
            "DAY": "DAY",
            "TIME": "TIME",
            "ROOM": "ROOM",
            "INSTRUCTOR": "INSTRUCTOR",
        };

        const headerRoom =
        {
            "SECTION": "SECTION",
            "DAY": "DAY",
            "TIME": "TIME",
            "INSTRUCTOR": "INSTRUCTOR",
        };

        document.getElementById('generateSchedBtn').addEventListener('click', function () {

            //Check first if the database already has the schedule
            acadVal = $('#acadYearSelect').val();
            semesterVal = $('#semesterSelect').val();

            $.ajax({
                url: "../api/generatescheduleapi/checkGenerate",
                type: "POST",
                data:
                {
                    acadVal: acadVal,
                    semesterVal: semesterVal,
                },
            })
                .done(function (result) {
                    if (result.length <= 0) {
                        //If the academic year and semester has no schedule yet, proceed to generate
                        proceedGenerating();
                    }
                    else {
                        //If it already has a schedule, then choose to open, cancel or delete
                        GeneratedSched = result;
                        alertAction();
                    }
                });

        });


        function proceedGenerating() {
            // Disable the button
            acadVal = $('#acadYearSelect').val();
            semesterVal = $('#semesterSelect').val();

            showLoading();
            //Call API to generate a schedule
            $.ajax({
                url: "../api/generatescheduleapi/startGenerate",
                type: "POST",
                data:
                {
                    acadVal: acadVal,
                    semesterVal: semesterVal,
                },
            })
                .done(function (result) {
                    GeneratedSched = result;
                    closeSwalWhilePageLoaded();
                    console.log(result);
                });
        }


        function deleteData() {
            acadVal = $('#acadYearSelect').val();
            semesterVal = $('#semesterSelect').val();

            $.ajax({
                url: "../api/generatescheduleapi/deleteSched",
                type: "POST",
                data:
                {
                    acadVal: acadVal,
                    semesterVal: semesterVal,
                },
            })
                .done(function (result) {
                    alertDoneSave();
                });
        }

        function activateButton() {
            document.getElementById('generateSchedBtn').disabled = false;
        }

        //to populate the academic year
        function populateAcademicYear() {
            $.ajax("../api/adminapi/getAcademicYear")
                .done(function (result) {
                    var template = document.querySelector("template#academicYearTemplate");
                    var parent = document.querySelectorAll("#acadYearSelect");

                    for (i = 0; i < parent.length; i++) {
                        result.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            cloned.querySelector("option").value = item.acadYearId;
                            cloned.querySelector("option").innerText = item.acadYearName;

                            parent[i].prepend(cloned);
                        });
                    }

                    //to deselect a selected option
                    $("select").val([]);
                });
        }


        function generateExcel() {
            /* create workbook & add worksheet */
            var wb = XLSX.utils.book_new();

            var uniqueSectionIds = [];

            // Define defaultValue
            var defaultValue = "Undefined";

            // Grouping and selecting the first item from each group
            const uniqueSections = new Map();
            // Iterate through the array and add objects to the map based on sectionId
            GeneratedSched.forEach((obj) => {
                uniqueSections.set(obj.sectionId, obj);
            });

            // Convert the map values back to an array
            const distinctData = Array.from(uniqueSections.values());

            //From the distinctData, get the Department ID of each sectionID and store it to array
            // Inner join based on both departmentId and sectionId
            var resultSection = distinctData.map(dd => {
                var matchingSection = Sections.find(sec => sec.sectionId === dd.sectionId);

                if (matchingSection) {
                    // Merge the properties from all three objects
                    return { ...dd, ...matchingSection };
                }
                return null; // No match found
            }).filter(result => result !== null);

            //Inner join the section with the department
            var resultDepartment = resultSection.map(rs => {
                var matchingDepartment = Departments.find(dep => dep.departmentId === rs.departmentId);
                if (matchingDepartment) {
                    return { ...rs, ...matchingDepartment };
                }
            }).filter(result => result !== null)

            //Now, make the department distinct
            const uniqueDepartments = new Map();
            resultDepartment.forEach((obj) => {
                uniqueDepartments.set(obj.departmentId, obj);
            });
            // Convert the map values back to an array
            const distinctDepartment = Array.from(uniqueDepartments.values());

            //Loop the department
            distinctDepartment.forEach(item => {
                /* create workbook & add worksheet */
                var wsData = [];

                //Filter the results of sections first
                var resultToLoop = resultDepartment.filter(gs => gs.departmentId === item.departmentId);

                // Convert the map values back to an array
                //const distinctSections = Array.from(uniqueSect.values());

                // Adding data rows
                wsData.push(["", "", "", "", "", "", ""]);
                wsData.push(["", "                                                           " + item.departmentName.toUpperCase(), "", "", "", "", ""]);


                resultToLoop.forEach(item => {

                    var resSection = Sections.find(sec => sec.sectionId == item.sectionId) ?? defaultValue;

                    wsData.push(["", "", "", "", "", "", ""]);
                    wsData.push([resSection.sectionName, "", "", "", "", "", ""]);
                    wsData.push(Object.keys(headerData));

                    //make a loop depends on the item.sectionId from the mother loop
                    // Grouping and selecting the first item from each group
                    const uniqueHolderLoadSchedule = new Map();

                    var uniqueLoadSchedules = Array.from(new Set(
                        GeneratedSched
                            .filter(rs => rs.sectionId == item.sectionId)
                    ));

                    uniqueLoadSchedules.forEach((obj) => {
                        uniqueHolderLoadSchedule.set(obj.subjectId, obj);
                    });

                    //loop the result from the distinct values
                    uniqueHolderLoadSchedule.forEach(item => {

                        var resSubject = Subjects.find(sub => sub.subjectId == item.subjectId) ?? defaultValue;
                        var resInstructor = Instructors.find(ins => ins.instructorId == item.instructorId) ?? defaultValue;
                        var resRoom = Rooms.find(rom => rom.roomId == item.roomId) ?? defaultValue;

                        // Assuming GeneratedSched is an array of objects with properties like SectionId, SubjectId, InstructorId, RoomId, and Day
                        var uniqueDayRoomSchedules = GeneratedSched
                            .filter(rs =>
                                rs.sectionId === item.sectionId &&
                                rs.subjectId === item.subjectId &&
                                rs.instructorId === item.instructorId &&
                                rs.roomId === item.roomId
                            )
                            .map(rs => rs.day)
                            .filter((value, index, self) => self.indexOf(value) === index);

                        var dayConvert = "";
                        var dayCombined = "";

                        uniqueDayRoomSchedules.forEach(item => {
                            switch (item) {
                                case 1:
                                    dayConvert = "M";
                                    break;
                                case 2:
                                    dayConvert = "T";
                                    break;
                                case 3:
                                    dayConvert = "W";
                                    break;
                                case 4:
                                    dayConvert = "TH";
                                    break;
                                case 5:
                                    dayConvert = "F";
                                    break;
                                case 6:
                                    dayConvert = "S";
                                    break;
                                case 7:
                                    dayConvert = "SUN";
                                    break;
                            }
                            dayCombined += dayConvert;
                        });

                        //convert the looped attributes to get the list of the time
                        var toPrintTime = GeneratedSched.filter(rs =>
                            rs.instructorId === item.instructorId &&
                            rs.sectionId === item.sectionId &&
                            rs.subjectId === item.subjectId &&
                            rs.roomId === item.roomId
                        );

                        //printing the time
                        var timeCount = toPrintTime.length;
                        var timeCounter = 0;

                        var startTime = "";
                        var endTime = "";

                        toPrintTime.forEach(item => {

                            timeCounter++;
                            var resTime = Timeslots.find(tm => tm.timeId == item.timeId) ?? defaultValue;

                            if (timeCounter == 1) {
                                //Convert 24 hour format to 12 hour format
                                // Parse the input time in HH:mm format
                                var [hours, minutes] = resTime.startTime.split(':');
                                // Convert to 12-hour format
                                var period = hours >= 12 ? 'PM' : 'AM';
                                hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                                // Format the result as HH:mm AM/PM
                                var time12 = hours + ':' + minutes + ' ' + period;

                                //STORE IT
                                startTime = time12;

                            }
                            else if (timeCounter == timeCount) {
                                //Convert 24 hour format to 12 hour format
                                // Parse the input time in HH:mm format
                                var [hours, minutes] = resTime.endTime.split(':');
                                // Convert to 12-hour format
                                var period = hours >= 12 ? 'PM' : 'AM';
                                hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                                // Format the result as HH:mm AM/PM
                                var time12 = hours + ':' + minutes + ' ' + period;

                                //STORE IT
                                endTime = time12;
                            }
                        });

                        //combine the time
                        var timeRange = startTime + " - " + endTime;

                        wsData.push([resSubject.subjectCode, resSubject.subjectName, resSubject.subjectUnit, dayCombined, timeRange, resRoom.roomName, resInstructor.instructorFname]);
                    });

                });

                var ws = XLSX.utils.aoa_to_sheet(wsData);

                //auto size feature
                ws['!cols'] = fitToColumn(wsData);
                function fitToColumn(wsData) {
                    // get maximum character of each column
                    return wsData[0].map((a, i) => ({ wch: Math.max(...wsData.map(a2 => a2[i] ? a2[i].toString().length : 0)) }));
                }

                /* add worksheet to workbook */
                XLSX.utils.book_append_sheet(wb, ws, item.departmentName.toUpperCase());

                //END of Department Loop
            });

            //Making of worksheet for the room schedules
            var wsData = [];

            // Grouping and selecting the first item from each group
            const uniqueRoom = new Map();
            // Iterate through the array and add objects to the map based on sectionId
            GeneratedSched.forEach((obj) => {
                uniqueRoom.set(obj.roomId, obj);
            });

            const distinctRoomData = Array.from(uniqueRoom.values());

            distinctRoomData.forEach(item => {

                var resRoom = Rooms.find(rom => rom.roomId == item.roomId) ?? defaultValue;
                wsData.push(["", "", "", ""]);
                wsData.push(["ROOM NAME: " + resRoom.roomName, "", "", ""]);
                wsData.push(Object.keys(headerRoom));

                const uniqueHolderRoomSchedule = new Map();

                var uniqueRoomSchedules = Array.from(new Set(
                    GeneratedSched
                        .filter(rs => rs.roomId == item.roomId)
                ));

                uniqueRoomSchedules.forEach((obj) => {
                    uniqueHolderRoomSchedule.set(obj.subjectId, obj);
                });

                // Sorting by day and startTime
                const sortedRoomSchedules = Array.from(uniqueHolderRoomSchedule.values())
                    .sort((a, b) => {
                        // First, compare by day
                        const dayComparison = a.day.propertyName - b.day.propertyName;
                        if (dayComparison !== 0) {
                            return dayComparison;
                        }

                        //return a.day.localeCompare(b.day);

                        // If days are the same, compare by startTime
                        return a.timeId.localeCompare(b.timeId);
                    });

                // Clear the original Map
                uniqueHolderRoomSchedule.clear();

                // Repopulate the Map with sorted values
                sortedRoomSchedules.forEach((obj) => {
                    uniqueHolderRoomSchedule.set(obj.subjectId, obj);
                });

                uniqueHolderRoomSchedule.forEach(item => {
                    var resSection = Sections.find(sub => sub.sectionId == item.sectionId) ?? defaultValue;
                    var resInstructor = Instructors.find(ins => ins.instructorId == item.instructorId) ?? defaultValue;

                    // Assuming GeneratedSched is an array of objects with properties like SectionId, SubjectId, InstructorId, RoomId, and Day
                    var uniqueDayRoomSchedules = GeneratedSched
                        .filter(rs =>
                            rs.sectionId === item.sectionId &&
                            rs.subjectId === item.subjectId &&
                            rs.instructorId === item.instructorId &&
                            rs.roomId === item.roomId
                        )
                        .map(rs => rs.day)
                        .filter((value, index, self) => self.indexOf(value) === index);

                    var dayConvert = "";
                    var dayCombined = "";

                    uniqueDayRoomSchedules.forEach(item => {
                        switch (item) {
                            case 1:
                                dayConvert = "M";
                                break;
                            case 2:
                                dayConvert = "T";
                                break;
                            case 3:
                                dayConvert = "W";
                                break;
                            case 4:
                                dayConvert = "TH";
                                break;
                            case 5:
                                dayConvert = "F";
                                break;
                            case 6:
                                dayConvert = "S";
                                break;
                            case 7:
                                dayConvert = "SUN";
                                break;
                        }
                        dayCombined += dayConvert;
                    });

                    //convert the looped attributes to get the list of the time
                    var toPrintTime = GeneratedSched.filter(rs =>
                        rs.instructorId === item.instructorId &&
                        rs.sectionId === item.sectionId &&
                        rs.subjectId === item.subjectId &&
                        rs.roomId === item.roomId
                    );

                    //printing the time
                    var timeCount = toPrintTime.length;
                    var timeCounter = 0;

                    var startTime = "";
                    var endTime = "";

                    toPrintTime.forEach(item => {

                        timeCounter++;
                        var resTime = Timeslots.find(tm => tm.timeId == item.timeId) ?? defaultValue;

                        if (timeCounter == 1) {
                            //Convert 24 hour format to 12 hour format
                            // Parse the input time in HH:mm format
                            var [hours, minutes] = resTime.startTime.split(':');
                            // Convert to 12-hour format
                            var period = hours >= 12 ? 'PM' : 'AM';
                            hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                            // Format the result as HH:mm AM/PM
                            var time12 = hours + ':' + minutes + ' ' + period;

                            //STORE IT
                            startTime = time12;

                        }
                        else if (timeCounter == timeCount) {
                            //Convert 24 hour format to 12 hour format
                            // Parse the input time in HH:mm format
                            var [hours, minutes] = resTime.endTime.split(':');
                            // Convert to 12-hour format
                            var period = hours >= 12 ? 'PM' : 'AM';
                            hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                            // Format the result as HH:mm AM/PM
                            var time12 = hours + ':' + minutes + ' ' + period;

                            //STORE IT
                            endTime = time12;
                        }
                    });

                    //combine the time
                    var timeRange = startTime + " - " + endTime;

                    wsData.push([resSection.sectionName, dayCombined, timeRange, resInstructor.instructorFname]);

                    //END OF LOOP FOR EACH ITEM INSIDE THE ROOM
                });
            });

            var ws = XLSX.utils.aoa_to_sheet(wsData);
            //auto size feature
            ws['!cols'] = fitToColumn(wsData);
            function fitToColumn(wsData) {
                // get maximum character of each column
                return wsData[0].map((a, i) => ({ wch: Math.max(...wsData.map(a2 => a2[i] ? a2[i].toString().length : 0)) }));
            }

            /* add worksheet to workbook */
            XLSX.utils.book_append_sheet(wb, ws, "Room Schedule".toUpperCase());


            /* write workbook */

            var convertAcad = AcadYears.find(ay => ay.acadYearId == acadVal);
            var filename = convertAcad.acadYearName + " - " + semesterVal + ".xlsx";

            if (wb.SheetNames.length === 0 || GeneratedSched == null || GeneratedSched.length == 0) {
                // Workbook is empty, handle it as needed
                alertError("Cannot open the file because it's empty. Closely check your data before generating.")
            } else {
                // Workbook is not empty, proceed with writing to file
                XLSX.writeFile(wb, filename);
            }
        }

        function saveData() {
            //Call API to compress and save the schedule
            showLoadingSavingData();
            $.ajax({
                url: "../api/generatescheduleapi/compressData",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ semester: semesterVal, acadYearId: acadVal, valRooms: GeneratedSched }),
            })
                .done(function (result) {
                    console.log("Compressed data : ");
                    console.log(result);
                    closeAfterSaving();
                });
        }

        //SWEET ALERT FUNCTIONS
        function showLoading() {
    @* let timerValue = 0; // Initial timer value in seconds
                let timerMinute = 0; *@

                let timerInterval = setInterval(() => {
                    timerValue++;
                    if (timerValue == 60) {
                        timerMinute++;
                        timerValue = 0;
                    }
                    document.getElementById('timerSeconds').innerText = timerValue; // Update the timer value in the modal
                    document.getElementById('timerMinutes').innerText = timerMinute; // Update the timer value in the modal
                }, 1000);

            Swal.fire({
                title: 'Processing',
                html: '<b>Generating Class Schedules...<br><span id="timerMinutes">0</span> minutes : <span id="timerSeconds">0</span> seconds</b>',// add html attribute if you want or remove
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval); // Clear the timer interval when the modal is closed
                    timerInterval = null;
                    timerValue = 0;
                    timerMinute = 0;
                    document.getElementById('timerSeconds').innerText = timerValue;
                    document.getElementById('timerMinutes').innerText = timerMinute;
                },
            })
        }


        function showLoadingSavingData() {
    @* let timerVal = 0; // Initial timer value in seconds
                let timerMin = 0; *@

                // Define a named function for the interval
                let timerInterval = setInterval(() => {
                    timerVal++;
                    if (timerVal == 60) {
                        timerMin++;
                        timerVal = 0;
                    }
                    document.getElementById('timerSeconds').innerText = timerVal; // Update the timer value in the modal
                    document.getElementById('timerMinutes').innerText = timerMin; // Update the timer value in the modal
                }, 1000);

            Swal.fire({
                title: 'Processing',
                html: '<b>Saving schedules<br><span id="timerMinutes">0</span> minutes : <span id="timerSeconds">0</span> seconds</b>',// add html attribute if you want or remove
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    if (timerInterval !== null) {
                        clearInterval(timerInterval);
                        timerInterval = null;
                    }
                    timerVal = 0;
                    timerMin = 0;
                    document.getElementById('timerSeconds').innerText = timerVal;
                    document.getElementById('timerMinutes').innerText = timerMin;
                },
            })
        }


        function closeSwalWhilePageLoaded() {
            setTimeout(() => {
                Swal.close();
                clearInterval(timerInterval); // Clear the timer interval when the modal is closed
                timerInterval = null;
    @* timerVal = 0;
                    timerMin = 0; *@
                if (GeneratedSched.length > 0) {
                    alertSuccess();
                }
                else {
                    alertError("Cannot open the file because it's empty. Closely check your data before generating.");
                }
            }, 500);
        }

        function closeAfterSaving() {
            setTimeout(() => {
                Swal.close();
                clearInterval(timerInterval); // Clear the timer interval when the modal is closed
                timerInterval = null;
    @* timerValue = 0;
                    timerMinute = 0; *@
                    alertDoneSave();
                generateExcel();
            }, 500);
        }

        //display success action
        function alertSuccess() {
            Swal.fire({
                icon: 'success',
                title: 'Done Generating',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                //Call the generating of sched to excel
    @* console.log("Hello");
                    console.log(GeneratedSched); *@
                if (GeneratedSched.length > 0) {
                    confirmSave();
                }
    @* else
                    {
                    alertError("Cannot open the file because it's empty. Closely check your data before generating.");
                    } *@
            });
        }

        //display error alert
        function alertError(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error occured',
                text: message,
            })
        }


        //display update confirmation
        function confirmSave() {
            Swal.fire({
                title: 'Do you want to download and save this schedule?',
                showCancelButton: true,
                confirmButtonText: 'Save',
            }).then((result) => {
                if (result.isConfirmed) {
                    //proceedUpdate();
                    saveData();
                    //generateExcel();
                }
            })
        }

        //display success action
        function alertDoneSave() {
            Swal.fire({
                icon: 'success',
                title: 'Successfully saved.',
                showConfirmButton: false,
                timer: 1500
            })
        }

        //display update confirmation
        function alertAction(result) {
            Swal.fire({
                html: '<h5>It already has an existing schedule.</h5> <br> Would you like to open it instead?',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'Cancel',
                showDenyButton: true,
                denyButtonText: 'Delete',
            }).then((result) => {
                if (result.isConfirmed) {
                    generateExcel();
                }
                else if (result.isDenied) {
                    // Delete button clicked
                    deleteData();
                }
            })
        }

        //document.ready don't touch
    });
</script>

<style>
    #formDiv {
        padding: 5%;
    }
</style>