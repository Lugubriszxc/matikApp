<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/css/tableCss/tableStyle.css" asp-append-version="true"/>
</head>
<body>
    <center><h1>Assign Instructor</h1></center>
    <button type="button" id="createAssignInstructorbtn" title="Add AssignInstructor" class="btn btn-success" style="color: #ffffff;" data-bs-toggle="modal" data-bs-target="#modalAssignInstructorCreate">
    <i class="fa-solid fa-circle-plus" style="color: #ffffff;"></i> &nbsp Assign an Instructor
    </button>
    <br><br>
    @Html.Partial("PartialAssignInstructor/AssignInstructorTable")
    @Html.Partial("PartialAssignInstructor/AssignInstructorCreate")
    @Html.Partial("PartialAssignInstructor/AssignInstructorUpdate")
</body>
</html>

<script>
    //initialize the variables here as global
    var selectedAssignInstructorId;
    var selectedAssignInstructor;
    var assignInstructorList = {};

    //course update
    var selectedCourse = {};
    var updateCourseLength;
    var updateCourseId;

    //section update
    var selectedSection = {};
    var updateSectionLength;
    var updateSectionId;

    //for the instructor
    var insDepartmentId;
    var updateSelectedDepartmentInsId;
    var selectedInstructor = {};
    var updateInstructorLength;
    var updateInstructorId;

    //because of certain situations, only the value can be read in .done function
    //and so, in order to retain the value, it is initialized as global
    var selectedValueCourse;

    $(document).ready(function(){
    //call the functions by default
    defaultUnselect();
    populateDepartment();
    populateDepartmentInstructorSelect();
    checkSelectInputs();
    populateSubjects();
    //populateInstructors();
    populateInstructorTable();


    //to populate the assign instructor table
    function populateInstructorTable()
    {
        $('#assignInstructorData').DataTable().destroy();
        if(!$.fn.DataTable.isDataTable('#assignInstructorData'))
        {
            $('#assignInstructorData').DataTable({
                responsive: true,
                ajax:
                {
                    url: '../api/adminapi/getAllDetailAssignInstructor',
                    dataSrc: '',
                },
                columns:
                [
                    {data: 'aId'},
                    {data: 'courseName'},
                    {data: 'sectionName'},
                    {data: 'subjectName'},
                    {data: 'yearLevel'},
                    {data: 'studentCount'},
                    {
                        data: 'aId',
                        render : function (data, type, row)
                        {
                            return btnAssignInstructor(data);
                        }
                    },
                ]
            });
        }
        //get the instructors list 
        getAssignInstructorDetails();
    }

    //to render buttons in action index
    function btnAssignInstructor(aId)
    {
        return "<center><a class='btn btn-success aiUpdate' data-aId=" + aId + "><i class='fa-solid fa-pen-to-square' style='color : #ffffff;'></i></a> | <a class='btn btn-danger aiDelete' data-aId=" + aId + "><i class='fa-solid fa-trash' style='color : #ffffff;'></i></a></center>"
    }

    //get the data of the assign instructor and store it to array
    function getAssignInstructorDetails()
    {
        $.ajax("../api/adminapi/getAllDetailAssignInstructor")
        .done(function(result){
            assignInstructorList = result;
        });
    }

    //this is the checker to guide the user 
    function checkSelectInputs()
    {
        //modal create
        const departmentSel = document.getElementById('departmentSelect');
        const courseSel = document.getElementById('courseSelect');
        const yearLevelSelect = document.getElementById('yearLevelPicker')
        const sectionSelect = document.getElementById('sectionSelect')
        const subjectSelect = document.getElementById('subjectSelect')
        const semesterSelect = document.getElementById('semesterSelect')

        const departmentSelUpdate = document.getElementById('departmentSelectUpdate');
        const courseSelUpdate = document.getElementById('courseSelectUpdate');
        const yearLevelSelectUpdate = document.getElementById('yearLevelPickerUpdate')
        const sectionSelectUpdate = document.getElementById('sectionSelectUpdate')
        const subjectSelectUpdate = document.getElementById('subjectSelectUpdate')
        const semesterSelectUpdate = document.getElementById('semesterSelectUpdate')

        //department condition
        if(departmentSel.selectedIndex !== -1)
        {
            courseSel.disabled = false;
        }
        else
        {
            courseSel.disabled = true;
            yearLevelSelect.disabled = true;
            sectionSelect.disabled = true;
        }

        //department update condition
        @* if(departmentSelUpdate.selectedIndex !== -1)
        {
            courseSelUpdate.disabled = false;
        }
        else
        {
            courseSelUpdate.disabled = true;
            yearLevelSelectUpdate.disabled = true;
            sectionSelectUpdate.disabled = true;
        } *@

        //department - instructor update condition
        @* if(departmentInstructorSelectUpdate.selectedIndex !== -1)
        {
            instructorSelectUpdate.disabled = false;
        }
        else
        {
            instructorSelectUpdate.disabled = true;
            $("#instructorSelectUpdate").val([]);
        } *@


        //course condition
        if(courseSel.selectedIndex !== -1)
        {
            yearLevelSelect.disabled = false;
        }
        else
        {
            yearLevelSelect.disabled = true;
            $("#yearLevelPicker").val([]);
        }

        //course update condition
        @* if(courseSelUpdate.selectedIndex !== -1)
        {
            yearLevelSelectUpdate.disabled = false;
        }
        else
        {
            yearLevelSelectUpdate.disabled = true;
            $("#yearLevelPickerUpdate").val([]);
        } *@


        //year level condition
        if(yearLevelSelect.selectedIndex !== -1)
        {
            sectionSelect.disabled = false;
        }
        else
        {
            sectionSelect.disabled = true;
            $("#sectionSelect").val([]);
        }

        //year level update condition
        @* if(yearLevelSelectUpdate.selectedIndex !== -1)
        {
            sectionSelectUpdate.disabled = false;
        }
        else
        {
            sectionSelectUpdate.disabled = true;
            $("#sectionSelectUpdate").val([]);
        } *@
    }

    //used to deselect options
    function defaultUnselect()
    {
        $("#yearLevelPicker").val([]);
        $("#semesterSelect").val([]);
        $("#yearLevelPickerUpdate").val([]);
        $("#semesterSelectUpdate").val([]);
    }

    //this is used to populate the department select
    function populateDepartment()
    {
        $.ajax("../api/adminapi/getDepartment")
        .done(function(result){
        var template = document.querySelector("template#departmentOptionTemplate");
        var parent = document.querySelectorAll("#departmentSelect");
        var parentUpdate = document.querySelectorAll("#departmentSelectUpdate");
        var parentInsDep = document.querySelectorAll("#departmentinSelectUpdate");
    
        //for create modal
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.departmentId;
            cloned.querySelector("option").innerText= item.departmentName;

            parent[i].append(cloned);
          });
        }

        //for update modal
        for(i = 0; i < parentUpdate.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.departmentId;
            cloned.querySelector("option").innerText= item.departmentName;

            parentUpdate[i].append(cloned);
          });
        }

        //for update modal department for instructor
        for(i = 0; i < parentInsDep.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.departmentId;
            cloned.querySelector("option").innerText= item.departmentName;

            parentInsDep[i].append(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    //to populate the department for filtering the instructor
    function populateDepartmentInstructorSelect()
    {
        $.ajax("../api/adminapi/getDepartment")
        .done(function(result){
        var template = document.querySelector("template#departmentInstructorOptionTemplate");
        var parentDep = document.querySelectorAll("#departmentinSelect");
        
        //for create modal
        for(i = 0; i < parentDep.length; i++){
          result.forEach(function (item){
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.departmentId;
            cloned.querySelector("option").innerText= item.departmentName;

            parentDep[i].append(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    //call this function if filter is empty
    function emptyCreateFilterSubject()
    {
        $.ajax("../api/adminapi/getSubjects")
        .done(function(result){
        var template = document.querySelector("template#subjectOptionTemplate");
        var parent = document.querySelectorAll("#subjectSelect");

        //for create modal
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            //console.log(item.departmentName);
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.subjectId;
            cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

            parent[i].append(cloned);
          });
        }

        });
    }

    //call this function if the update filter is empty
    function emptyUpdateFilterSubject()
    {
        $.ajax("../api/adminapi/getSubjects")
        .done(function(result){
        var template = document.querySelector("template#subjectOptionTemplate");
        var parentUpdate = document.querySelectorAll("#subjectSelectUpdate");

        //for update modal
        for(i = 0; i < parentUpdate.length; i++){
          result.forEach(function (item){
            //console.log(item.departmentName);
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.subjectId;
            cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

            parentUpdate[i].append(cloned);
          });
        }

        });
    }

    //this is used to populate the subject select
    function populateSubjects()
    {
        $.ajax("../api/adminapi/getSubjects")
        .done(function(result){
        var template = document.querySelector("template#subjectOptionTemplate");
        var parent = document.querySelectorAll("#subjectSelect");
        var parentUpdate = document.querySelectorAll("#subjectSelectUpdate");
        
        @* document.querySelector("#subjectSelect").innerHTML = "";
        document.querySelector("#subjectSelectUpdate").innerHTML = ""; *@

        //for create modal
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            //console.log(item.departmentName);
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.subjectId;
            cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

            parent[i].append(cloned);
          });
        }

        //for update modal
        for(i = 0; i < parentUpdate.length; i++){
          result.forEach(function (item){
            //console.log(item.departmentName);
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.subjectId;
            cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

            parentUpdate[i].append(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    }

    @* //this is used to populate the instructor select
    function populateInstructors()
    {
        $.ajax("../api/adminapi/getInstructors")
        .done(function(result){
        var template = document.querySelector("template#instructorOptionTemplate");
        var parent = document.querySelectorAll("#instructorSelect");
        
        //for create modal
        for(i = 0; i < parent.length; i++){
          result.forEach(function (item){
            //console.log(item.departmentName);
            var cloned = template.content.cloneNode(true);
            cloned.querySelector("option").value = item.instructorId;
            cloned.querySelector("option").innerText = item.instructorLname + ", " + item.instructorFname;

            parent[i].append(cloned);
          });
        }

        //to deselect a selected option
        $("select").val([]);
        });
    } *@

    //get the select action when selecting an option
    $("#departmentSelect").change(function(){
        //after selection, get the department ID and compare it to existing course list

        // Get the selected index
        const actionSelect = document.getElementById("departmentSelect");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        populateCourseSelect(selectedValue, "create");
        checkSelectInputs();
    });

    @* $("#departmentinSelect").change(function(){
        //after selection, get the department ID and compare it to existing course list

        //Get the selected index
        const actionSelect = document.getElementById("departmentinSelect");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        populateInstructorList(selectedValue, "create");
        checkSelectInputs();
    }); *@

    @* $("#departmentinSelectUpdate").change(function(){
        //after selection, get the department ID and compare it to existing course list

        //Get the selected index
        const actionSelect = document.getElementById("departmentinSelectUpdate");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        populateInstructorList(selectedValue, "update");
        checkSelectInputs();
    }); *@

    //to populate the instructor selection option based on department ID
    @* function populateInstructorList(selectedDepartmentId, status)
    {
        if(status == "create")
        {
            const actionSelect = document.getElementById("instructorSelect");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get instructor select dep by department ID
            $.ajax({
                url: "../api/adminapi/getInstructorSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template instructors
                var template = document.querySelector("template#instructorOptionTemplate");
                var parent = document.querySelectorAll("#instructorSelect");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.instructorId;
                    cloned.querySelector("option").innerText = item.instructorLname + ", " + item.instructorFname;

                    parent[i].append(cloned);
                    });
                }

                //what is the use of selected course?
                //seletedCourse = result;
                //to deselect a selected option
                $("#instructorSelect").val([]);
            })
        }
        else if(status == "update")
        {
            const actionSelect = document.getElementById("instructorSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get instructor select dep by department ID
            $.ajax({
                url: "../api/adminapi/getInstructorSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template instructors
                var template = document.querySelector("template#instructorOptionTemplate");
                var parent = document.querySelectorAll("#instructorSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.instructorId;
                    cloned.querySelector("option").innerText = item.instructorLname + ", " + item.instructorFname;

                    parent[i].append(cloned);
                    });
                }

                //what is the use of selected course?
                selectedInstructor = result;

                //Get the select instructor update
                const selectInstructor = document.getElementById("instructorSelectUpdate");
                updateInstructorLength = selectInstructor.options.length;
                $("#instructorSelectUpdate").val([]);
            })
        }
        else //means to populate the data
        {   
            const actionSelect = document.getElementById("instructorSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get instructor select dep by department ID
            $.ajax({
                url: "../api/adminapi/getInstructorSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template instructors
                var template = document.querySelector("template#instructorOptionTemplate");
                var parent = document.querySelectorAll("#instructorSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.instructorId;
                    cloned.querySelector("option").innerText = item.instructorLname + ", " + item.instructorFname;

                    parent[i].append(cloned);
                    });
                }

                //what is the use of selected course?
                selectedInstructor = result;

                //Get the select instructor update
                const selectInstructor = document.getElementById("instructorSelectUpdate");
                updateInstructorLength = selectInstructor.options.length;

                for(var i = 0; i < selectInstructor.options.length; i++)
                {
                    if(selectInstructor.options[i].value == updateInstructorId)
                    {
                        selectInstructor.options[i].selected = true;
                        break;
                    }
                }
            })
        }
    } *@

    //get the select action when selecting an option
    $("#courseSelect").change(function(){
        $("#yearLevelPicker").val([]);
        const actionSelect = document.getElementById("sectionSelect");
        // Remove all options from the select element
        while (actionSelect.options.length > 0) {
            actionSelect.remove(0);
        }
        
        checkSelectInputs();
    });

    //get the select action when selecting an option (UPDATE)
    $("#courseSelectUpdate").change(function(){
        $("#yearLevelPickerUpdate").val([]);
        const actionSelect = document.getElementById("sectionSelectUpdate");
        // Remove all options from the select element
        while (actionSelect.options.length > 0) {
            actionSelect.remove(0);
        }
        
        checkSelectInputs();
    });

    //to populate the course selection option
    function populateCourseSelect(selectedDepartmentId, status)
    {
        if(status == "create")
        {
            $("#courseSelect").val([]);
            const actionSelect = document.getElementById("courseSelect");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get course select dep by department ID
            $.ajax({
                url: "../api/adminapi/getCourseSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template courses
                var template = document.querySelector("template#courseOptionTemplate");
                var parent = document.querySelectorAll("#courseSelect");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.courseId;
                    cloned.querySelector("option").innerText= item.courseName;

                    parent[i].append(cloned);
                    });
                }

                seletedCourse = result;
                //to deselect a selected option of course
                $("#courseSelect").val([]);
            })
        }
        else if(status == "update")
        {
            const actionSelect = document.getElementById("courseSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            $("#yearLevelPickerUpdate").val([]);

            const actionSelectSection = document.getElementById("sectionSelectUpdate");
            // Remove all options from the select element
            while (actionSelectSection.options.length > 0) {
                actionSelectSection.remove(0);
            }

            //AJAX get course select dep by department ID
            $.ajax({
                url: "../api/adminapi/getCourseSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template courses
                var template = document.querySelector("template#courseOptionTemplate");
                var parent = document.querySelectorAll("#courseSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.courseId;
                    cloned.querySelector("option").innerText= item.courseName;

                    parent[i].prepend(cloned);
                    });
                }

                seletedCourse = result;

                // Get the select course update
                const selectCourse = document.getElementById("courseSelectUpdate");
                updateCourseLength = selectCourse.options.length;
                $("#courseSelectUpdate").val([]);
            })
        }
        else //else, to populate
        {
            //When updating for the purpose of populating the data from the database of course
            const actionSelect = document.getElementById("courseSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get course select dep by department ID
            $.ajax({
                url: "../api/adminapi/getCourseSelectDep",
                type: "POST",
                data:
                {
                    departmentId : selectedDepartmentId,
                },
            }).done(function(result){
                //template courses
                var template = document.querySelector("template#courseOptionTemplate");
                var parent = document.querySelectorAll("#courseSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.courseId;
                    cloned.querySelector("option").innerText= item.courseName;

                    parent[i].prepend(cloned);
                    });
                }

                seletedCourse = result;
                // Get the select course update
                const selectCourse = document.getElementById("courseSelectUpdate");
                updateCourseLength = selectCourse.options.length;

                for(var i = 0; i < selectCourse.options.length; i++)
                {
                    if(selectCourse.options[i].value == updateCourseId)
                    {
                        selectCourse.options[i].selected = true;
                        break;
                    }
                }

                //Get the selected index of the course id
                const actionSelectCourse = document.getElementById("courseSelectUpdate");
                const selectedIndexCourse = actionSelectCourse.selectedIndex;

                //insert the value to the global
                selectedValueCourse = actionSelectCourse.options[selectedIndexCourse].value;
            })
        }
    }

    //get the select action when selecting an options (UPDATE)
    $("#departmentSelectUpdate").change(function(){
        //after selection, get the department ID and compare it to existing course list

        // Get the selected index
        const actionSelect = document.getElementById("departmentSelectUpdate");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        populateCourseSelect(selectedValue, "update");
        checkSelectInputs();
    });

    //get the select action when selecting an option (year level)
    $("#yearLevelPicker").change(function(){
        //after selection, get the department ID and compare it to existing course list

        // Get the selected index of year level
        const actionSelect = document.getElementById("yearLevelPicker");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        // Get the selected index of course
        const actionSelectCourse = document.getElementById("courseSelect");
        const selectedIndexCourse = actionSelectCourse.selectedIndex;
        const selectedValueCourse = actionSelectCourse.options[selectedIndexCourse].value;

        populateSectionSelect(selectedValue, selectedValueCourse, "create");
        checkSelectInputs();
    });

    //get the select action when selecting an options (UPDATE for year level)
    $("#yearLevelPickerUpdate").change(function(){
        //after selection, get the department ID and compare it to existing course list

        // Get the selected index of year level
        const actionSelect = document.getElementById("yearLevelPickerUpdate");
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        // Get the selected index of course
        const actionSelectCourse = document.getElementById("courseSelectUpdate");
        const selectedIndexCourse = actionSelectCourse.selectedIndex;
        const selectedValueCourse = actionSelectCourse.options[selectedIndexCourse].value;

        populateSectionSelect(selectedValue, selectedValueCourse, "update");
        checkSelectInputs();
    });

    //to populate the class selection option
    function populateSectionSelect(yearLevel, courseId, status)
    {
        if(status == "create")
        {
            const actionSelect = document.getElementById("sectionSelect");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get section by year level and department and course
            $.ajax({
                url: "../api/adminapi/getSectionYearrCor",
                type: "POST",
                data:
                {
                    yearLevel : yearLevel,
                    courseId : courseId,
                },

            }).done(function(result){
                //template section
                var template = document.querySelector("template#sectionOptionTemplate");
                var parent = document.querySelectorAll("#sectionSelect");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.sectionId;
                    cloned.querySelector("option").innerText= item.sectionName;

                    parent[i].append(cloned);
                    });
                }

                seletedCourse = result;
                //to deselect a selected option of course
                $("#sectionSelect").val([]);
            })
        }
        else if(status == "update")
        {
            const actionSelect = document.getElementById("sectionSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get section by year level and department and course
            $.ajax({
                url: "../api/adminapi/getSectionYearrCor",
                type: "POST",
                data:
                {
                    yearLevel : yearLevel,
                    courseId : courseId,
                },

            }).done(function(result){
                //template section
                var template = document.querySelector("template#sectionOptionTemplate");
                var parent = document.querySelectorAll("#sectionSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.sectionId;
                    cloned.querySelector("option").innerText= item.sectionName;

                    parent[i].append(cloned);
                    });
                }

                seletedCourse = result;
                // Get the select section update
                const selectSection = document.getElementById("sectionSelectUpdate");
                updateSectionLength = selectSection.options.length;
                $("#sectionSelectUpdate").val([]);
            })
        }
        else
        {
            const actionSelect = document.getElementById("sectionSelectUpdate");
            // Remove all options from the select element
            while (actionSelect.options.length > 0) {
                actionSelect.remove(0);
            }

            //AJAX get section by year level and department and course
            $.ajax({
                url: "../api/adminapi/getSectionYearrCor",
                type: "POST",
                data:
                {
                    yearLevel : yearLevel,
                    courseId : updateCourseId,
                },

            }).done(function(result){
                //template section
                var template = document.querySelector("template#sectionOptionTemplate");
                var parent = document.querySelectorAll("#sectionSelectUpdate");
                
                for(i = 0; i < parent.length; i++){
                    result.forEach(function (item){
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.sectionId;
                    cloned.querySelector("option").innerText= item.sectionName;

                    parent[i].append(cloned);
                    });
                }

                seletedCourse = result;
                // Get the select section update
                const selectSection = document.getElementById("sectionSelectUpdate");
                updateSectionLength = selectSection.options.length;

                for(var i = 0; i < selectSection.options.length; i++)
                {
                    if(selectSection.options[i].value == updateSectionId)
                    {
                        selectSection.options[i].selected = true;
                        break;
                    }
                }
            })
        }
    }


    //assign an instructor [create]
    //createAssignInstructor
    $("#createAssignInstructor").click((e) => {
        var arrData = {};

        //count the number of element inside the form
        var formelements = $("#createAssignInstructorForm .form-group");

        //initialize the student count
        let studCount = document.getElementById('studCount');

        //initialize the filter input 
        let filterBox = document.getElementById('filterSub');



        //getting the data from the form
        var formInputs = $("#createAssignInstructorForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        //making the filter box not necessary for conditional statements
        let emptyFilter = new Boolean(false);
        emptyFilter = Boolean(false);

        if(filterBox.value === '')
        {
            emptyFilter = Boolean(false);
        }

        let emptyEl = new Boolean(false);
        //alternative of bool
        if(studCount.value === '')
        {
            //if the student count is empty return true 
            emptyEl = Boolean(true);
        }
        else{
            //if the student count is not empty then return false
            emptyEl = Boolean(false);
        }

        //if all elements are not empty
        if(formInputs.length === formelements.length && emptyEl ===  Boolean(false) && emptyFilter === Boolean(false))
        {

            //check the data if there is an identical data
            $.ajax({
                url: "../api/adminapi/checkAssignInstructorExistingData",
                type: "POST",
                data:
                {
                    asi : arrData,
                },
            })
            .done(function(result){

                //false means there is no existing subject in the section
                if(result == null)
                {
                    //check if the data has already an existing subject in the particular section
                    $.ajax({
                        url: "../api/adminapi/checkAssignInstructorExistingSubject",
                        type: "POST",
                        data:
                        {
                            asi : arrData,
                        },
                    })
                    .done(function(result){
                        
                        //false means there is no existing data
                        if(result == null)
                        {
                            //you can now proceed to save the data 
                            //Call API to assign an instructor
                            $.ajax({
                                url: "../api/adminapi/createAssignInstructor",
                                type: "POST",
                                data:
                                {
                                    asi : arrData,
                                },
                            })
                            .done(function(){
                                $("#createAssignInstructorForm")[0].reset();
                                $("#modalAssignInstructorCreate").modal("toggle");
                                alertSuccess();
                                populateInstructorTable();
                            });
                        }
                        else
                        {
                            alertError("There is already a subject registered in this section.");
                        }
                    });
                }
                else
                {
                    alertError("There is an already existing data!");
                }
            });
        }
        else   
        {
            alertError("Input the necessary elements!");
        }

    });

    //when clicking the update button
    $("#updateAssignInstructor").click((e) => {
        alertSaveChanges();
    });

    function proceedUpdate()
    {
        var arrData = {};

        //GET YOUR ORIGINAL DATA FROM THE SELECTED CELL
        var oClassID = selectedAssignInstructor.sectionId;
        var oSemester = selectedAssignInstructor.semester;
        var oSubjectID = selectedAssignInstructor.subjectId;
        var oInstructorID = selectedAssignInstructor.instructorId;

        //count the number of element inside the form
        var formelements = $("#updateAssignInstructorForm .form-group");

        //initialize the student count
        let studCount = document.getElementById('studCountUpdate');

        //initialize the filter box 
        let filterBox = document.getElementById('filterSubUpdate');

        //getting the data from the form
        var formInputs = $("#updateAssignInstructorForm").serializeArray();
        formInputs.forEach(function(item){
            arrData[item.name] = item.value;
        });

        arrData.aId = selectedAssignInstructorId;

        //making the filter box not necessary for conditional statements
        let emptyFilter = new Boolean(false);
        emptyFilter = Boolean(false);

        if(filterBox.value === '')
        {
            emptyFilter = Boolean(false);
        }


        let emptyEl = new Boolean(false);
        //alternative of bool
        if(studCount.value === '')
        {
            //if the student count is empty then return true
            emptyEl = Boolean(true);
        }
        else{
            //if the student count is not empty then return false
            emptyEl = Boolean(false);
        }

        //if all elements are not empty
        if(formInputs.length === formelements.length && emptyEl ===  Boolean(false) && emptyFilter === Boolean(false))
        {

            //check the data if there is an identical data
            $.ajax({
                url: "../api/adminapi/checkAssignInstructorExistingData",
                type: "POST",
                data:
                {
                    asi : arrData,
                },
            })
            .done(function(result){
                //false means there is no existing subject in the section
                if(result == null)
                {
                    //check if the data has already an existing subject in the particular section
                    $.ajax({
                        url: "../api/adminapi/checkAssignInstructorExistingSubject",
                        type: "POST",
                        data:
                        {
                            asi : arrData,
                        },
                    })
                    .done(function(result){
                        if(result == null)
                        {
                            //If there's none, then you're free to proceed
                            //Call API to assign an instructor
                            $.ajax({
                                url: "../api/adminapi/updateAssignInstructor",
                                type: "POST",
                                data:
                                {
                                    asi : arrData,
                                },
                            })
                            .done(function(){
                                $("#createAssignInstructorForm")[0].reset();
                                $("#updateAssignInstructorForm")[0].reset();
                                $("#modalAssignInstructorUpdate").modal("toggle");
                                alertSuccess();
                                populateInstructorTable();
                            });
                        }
                        else
                        {
                            if(oClassID == result.sectionId && oSubjectID == result.subjectId)
                            {
                                //If it's because of the selected cell, you can proceed to update
                                //Call API to assign an instructor
                                $.ajax({
                                    url: "../api/adminapi/updateAssignInstructor",
                                    type: "POST",
                                    data:
                                    {
                                        asi : arrData,
                                    },
                                })
                                .done(function(){
                                    $("#createAssignInstructorForm")[0].reset();
                                    $("#updateAssignInstructorForm")[0].reset();
                                    $("#modalAssignInstructorUpdate").modal("toggle");
                                    alertSuccess();
                                    populateInstructorTable();
                                });
                            }
                            else
                            {
                                alertError("There is already a subject registered in this section.");
                            }
                        }
                    });
                }
                else
                {
                    //alertError("There is an already existing data!");
                    //If there is an existing data, check if it's because of your selected cell

                    if(oClassID == result.sectionId && oSemester == result.semester && oSubjectID == result.subjectId)
                    {
                        //If it's because of the selected cell
                        //check if the data has already an existing subject in the particular section
                        $.ajax({
                            url: "../api/adminapi/checkAssignInstructorExistingSubject",
                            type: "POST",
                            data:
                            {
                                asi : arrData,
                            },
                        })
                        .done(function(result){
                            
                            //false means there is no existing data
                            if(result == null)
                            {
                                //you can now proceed to save the data 
                                //Call API to assign an instructor
                                $.ajax({
                                    url: "../api/adminapi/updateAssignInstructor",
                                    type: "POST",
                                    data:
                                    {
                                        asi : arrData,
                                    },
                                })
                                .done(function(){
                                    $("#createAssignInstructorForm")[0].reset();
                                    $("#updateAssignInstructorForm")[0].reset();
                                    $("#modalAssignInstructorUpdate").modal("toggle");
                                    alertSuccess();
                                    populateInstructorTable();
                                });
                            }
                            else
                            {
                                //If there's an existing subject, check if it's because of the selected cell
                                if(oClassID == result.sectionId && oSubjectID == result.subjectId)
                                {
                                    //If it's because of the selected cell, you can proceed to update
                                    //Call API to assign an instructor
                                    $.ajax({
                                        url: "../api/adminapi/updateAssignInstructor",
                                        type: "POST",
                                        data:
                                        {
                                            asi : arrData,
                                        },
                                    })
                                    .done(function(){
                                        $("#createAssignInstructorForm")[0].reset();
                                        $("#updateAssignInstructorForm")[0].reset();
                                        $("#modalAssignInstructorUpdate").modal("toggle");
                                        alertSuccess();
                                        populateInstructorTable();
                                    });
                                }
                                else
                                {
                                    alertError("There is already a subject registered in this section.");
                                }
                            }
                        });
                    }
                    else
                    {
                        alertError("There is an already existing data!");
                    }
                }
            });
        }
        else   
        {
            alertError("Input the necessary elements!");
        }
    }

    //upon closing the modal create
    $("#modalAssignInstructorCreateClose").click(function(){
        defaultClear();
    });

    //upon closing the modal update
    //upon closing the modal create
    $("#modalAssignInstructorUpdateClose").click(function(){
        defaultClear();
    });

    //delete the assign instructor
    $("tbody").delegate(".aiDelete", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-aId");
        if(i != null)
        {
            //Code here for deleting the time slot
            selectedAssignInstructorId = i;
            alertDeleteConfirmation(selectedAssignInstructorId);
        }
    });

    //after confirming delete
    function deleteAssignInstructor(selectedAssignInstructorId)
    {
        //AJAX delete unavailable time slot
        $.ajax({
            url: "../api/adminapi/deleteAssignInstructor",
            type: "POST",
            data:
            {
                aId : selectedAssignInstructorId,
            },
        }).done(function(){
            alertSuccess();
            populateInstructorTable();
        })
    }

    //when clicking the update button
    $("tbody").delegate(".aiUpdate", "click", function(e){
        var i = e.target.closest("a").getAttribute("data-aId");
        if(i != null)
        {
            //defaultClear();
            $("#createAssignInstructorForm")[0].reset();
            $("#modalAssignInstructorUpdate").modal("toggle");

            selectedAssignInstructorId = i;
            selectedAssignInstructor = assignInstructorList.find(element => element.aId == i);

            oFormObject = document.forms["updateAssignInstructorForm"];
            initForm(oFormObject, selectedAssignInstructor);
        }
    });

    
    //to populate the selected element to the form
    function initForm(form, data)
    {
        //for the department
        $('#departmentSelectUpdate').val(data.departmentId);

        // Get the selected index
        const actionSelect = document.getElementById('departmentSelectUpdate');
        const selectedIndex = actionSelect.selectedIndex;
        const selectedValue = actionSelect.options[selectedIndex].value;

        //populate the data of the course
        populateCourseSelect(selectedValue, "populate");

        //this updateCourseId is needed
        updateCourseId = data.courseId;

        //this time is for the year and section
        $('#yearLevelPickerUpdate').val(data.yearLevel);

        //Get the selected index of the year level
        const actionSelectYear = document.getElementById('yearLevelPickerUpdate'); 
        const selectedIndexYear = actionSelectYear.selectedIndex;
        const selectedValueYear = actionSelectYear.options[selectedIndexYear].value;

        //populate the data of the section
        populateSectionSelect(selectedValueYear, updateCourseId, "populate");
        updateSectionId = data.sectionId;

        //subject
        $('#subjectSelectUpdate').val(data.subjectId);

        //semester
        $('#semesterSelectUpdate').val(data.semester);

        //number of students
        $('#studCountUpdate').val(data.studentCount);

        //for the instructor : the goal is to get the department id of the particular instructor
        //the data of the department of the instructor is already stored when doing the inner join

        //Get the selected index of the department for instructor
        @* const actionSelectDepIn = document.getElementById("departmentinSelectUpdate");
        const selectedIndexDepIn = actionSelectDepIn.selectedIndex;
        const selectedValueDepIn = actionSelectDepIn.options[selectedIndexDepIn].value;

        populateInstructorList(selectedValueDepIn, "populate"); *@
    }


    //filtering the subject list upon creating
    $('#filterSub').on("input", function(){
      var searchedItem = $(this).val();

      //console.log(searchedItem);

      //var sear = productList.filter(element => element.name.toLowerCase().includes(searchedItem.toLowerCase()) || element.name.toUpperCase().includes(searchedItem.toUpperCase()));
      //console.log(sear);

        if(searchedItem === '')
        {
            //populateSubjects();
            emptyCreateFilterSubject();
        }
        else
        {
            //AJAX to filter the subject list with subject code and name as basis
            $.ajax({
                url: "../api/adminapi/filterSubjectList",
                type: "POST",
                data:
                {
                    searchedItem : searchedItem,
                },
            }).done(function(result){
                var template = document.querySelector("template#subjectOptionTemplate");
                var parent = document.querySelectorAll("#subjectSelect");
                //var parentUpdate = document.querySelectorAll("#subjectSelectUpdate");

                document.querySelector("#subjectSelect").innerHTML = "";
                //document.querySelector("#subjectSelectUpdate").innerHTML = "";
            
                //for create modal
                for(i = 0; i < parent.length; i++){
                result.forEach(function (item){
                    //console.log(item.departmentName);
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.subjectId;
                    cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

                    parent[i].append(cloned);
                });
                }

                @* //for update modal
                for(i = 0; i < parentUpdate.length; i++){
                result.forEach(function (item){
                    //console.log(item.departmentName);
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.subjectId;
                    cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

                    parentUpdate[i].append(cloned);
                });
                } *@

            });
        }

      //console.log(searchedItem);
      
    });


    //filtering the subject list upon updating
    $('#filterSubUpdate').on("input", function(){
      var searchedItem = $(this).val();

        if(searchedItem === '')
        {
            //populateSubjects();
            emptyUpdateFilterSubject();
        }
        else
        {
            //AJAX to filter the subject list with subject code and name as basis
            $.ajax({
                url: "../api/adminapi/filterSubjectList",
                type: "POST",
                data:
                {
                    searchedItem : searchedItem,
                },
            }).done(function(result){
                var template = document.querySelector("template#subjectOptionTemplate");
                var parentUpdate = document.querySelectorAll("#subjectSelectUpdate");

                document.querySelector("#subjectSelectUpdate").innerHTML = "";

                //for update modal
                for(i = 0; i < parentUpdate.length; i++){
                result.forEach(function (item){
                    //console.log(item.departmentName);
                    var cloned = template.content.cloneNode(true);
                    cloned.querySelector("option").value = item.subjectId;
                    cloned.querySelector("option").innerText = item.subjectCode + " | " + item.subjectName;

                    parentUpdate[i].append(cloned);
                });
                }

            });
        }

      //console.log(searchedItem);
      
    });


    //upon opening of create modal
    $("#createAssignInstructorbtn").click((e) => {
        defaultClear();
    });

    function defaultClear()
    {
        $("#createAssignInstructorForm")[0].reset();
        $("#updateAssignInstructorForm")[0].reset();
        defaultUnselect();
        $("select").val([]);
    }

    //sweet alert
    //display error alert
    function alertError(message)
    {
        Swal.fire({
            icon: 'error',
            title: 'Error occured',
            text: message,
        })
    }

    //display success action
    function alertSuccess()
    {
        Swal.fire({
            icon: 'success',
            title: 'Your work has been saved', 
            showConfirmButton: false,
            timer: 1500
        })
    }

    //display delete confirmation
    function alertDeleteConfirmation(selectedAssignInstructorId)
    {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!'
        }).then((result) => {
            if(result.isConfirmed){
                deleteAssignInstructor(selectedAssignInstructorId);
            }
        })
    }

    //display update confirmation
    function alertSaveChanges()
    {
        Swal.fire({
            title: 'Do you want to save the changes?',
            showCancelButton: true,
            confirmButtonText: 'Save',
        }).then((result) => {
            if(result.isConfirmed){
                proceedUpdate();
            }
        })
    }

    
    }); //end of document.ready function
</script>