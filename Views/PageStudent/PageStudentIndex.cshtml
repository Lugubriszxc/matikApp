<!DOCTYPE html>
<html lang="en">
<header>
    
</header>
<body>
    <nav class="navbar bg-body-tertiary fixed-top">
    <div class="container-fluid">
        @* <a class="navbar-brand text-warning" href="#">M A T I K</a> *@
        <button class="navbar-toggler me-auto btn-black" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-label="Toggle navigation">
            <span class=""><i class="fa-solid fa-bars text-warning"></i></span>
            
        </button>
        <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
        <div class="offcanvas-header">
            <center><h5 class="offcanvas-title studentName" id="offcanvasNavbarLabel">Student X</h5></center>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle text-dark" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                User Settings
                </a>
                <ul class="dropdown-menu dropdown-menu-end dropdown-menu-lg-start">
                <li class="dropdown-item"><a class="nav-link btnUpdate">Change detail</a></li>
                <li class="dropdown-item"><a class="nav-link btnChangePass">Change password</a></li>
                </ul>
            </li>

            <br><br><br><br><br>
            <li class="nav-item">
                <a class="btn btn-warning" id="btnSignout">Signout</a>
            </li>
            </ul>
        </div>
        </div>
    </div>
    </nav>

    <br><br>
    <div><h4>Welcome, <span class="studentName"></span></h4></div>
    <hr>

    <!-- THIS IS FOR THE CONTENT OF THE PAGE-->
    <center><h1></h1></center>

    @Html.Partial("PageStudentUpdate")
    @Html.Partial("StudentChangePass")
    @Html.Partial("PageStudentTable")

    <div id="contentContainer">
        <!-- Existing content or future dynamic content goes here -->
    </div>
</body>
</html>

<script>
    $(document).ready(function(){
        margin();

        function margin(){
            $(".page-content").removeClass();
            $(".container-fluid.shared").removeClass();
            @* $(".bods").removeClass(); *@
        }
    });
</script>

<style>
    .navbar.shared{
        display: none;
    }

    .bods
    {
        color: white;
        background-color: white;
    }

    .btn-black {
    color: #000;
    background-color: maroon; /* Add this line to set the background color */
    border-color: gold; /* Add this line to set the border color */
    }

    @* body
    {
        color: black;
        background-color: black;
    } *@
</style>

<script>
    var studentLoad = {}; // this will hold all of the study loads of the student
    $(document).ready(function(){

        var storedUserAuth = sessionStorage.getItem('userauth');
        var userAuth = JSON.parse(storedUserAuth);

		if(userAuth === null)
        {
            window.location.href = "/Authorization/SigninStudent";
        }
        else if(userAuth.userType !== 'student')
        {
            if(userAuth.userType === 'admin')
            {
                window.location.href = "/Home/Index";
            }
            else if(userAuth.userType === 'instructor')
            {
                window.location.href = "/PageInstructor/PageInstructorIndex";
            }
        }

        var Subjects = {};
        var Rooms = {};
        var Sections = {};
        var Timeslots = {};
        var AcadYears = {};

        loadStudentDetail();
        loadList();
        var selectedStudent;

        function loadStudentDetail()
        {
            //LOAD THE INSTRUCTOR DETAILS 
            $.ajax({
            url: "../api/pagestudentapi/loadUserDetail",
            type: "POST",
            data:
            {
                studentId : userAuth.id,
            },
            }).done(function(result){
                
                if(result != null)
                {
                    selectedStudent = result;
                    //console.log(result.instructorFname);
                    $('.studentName').text(result.studentFname + " " + result.studentLname);
                }
            })
        }

        $(".btnChangePass").click((e) => {
            $("#modalChangePass").modal("toggle");
        });

        //after clicking change password
        $("#passChange").click(function(){

            var currentPass = $("#inputCurrentPass").val();
            var newPass = $("#inputNewPass").val();
            var confirmPass = $("#inputConfirmPass").val();

            if(currentPass == "" || newPass == "" || confirmPass == "")
            {
                alertError("Complete the field first!");
            }
            else if(newPass !== confirmPass)
            {
                alertError("Password does not match!");
            }
            else
            {
                alertConfirmChange();
            }
        });

        function proceedChangePass()
        {

            var currentPass = $("#inputCurrentPass").val();
            var newPass = $("#inputNewPass").val();
            var confirmPass = $("#inputConfirmPass").val();

            $.ajax({
            url: "../api/authorizationapi/changeUserPass",
            type: "POST",
            data:
            {
                auth : userAuth,
                newP : newPass,
                currentP : currentPass,
            },
            })
            .done(function(result){

                if(result == "Invalid")
                {
                    alertError("Invalid password.");
                }
                else if(result == "Confirm")
                {
                    $("#passChangeForm")[0].reset();
                    $("#modalChangePass").modal("toggle");
                    alertSuccess();
                    loadStudentDetail();
                }
            });
        }


        //UPDATE STUDENT
        $(".btnUpdate").click((e) => {
            $("#modalStudentUpdate").modal("toggle");

            oFormObject = document.forms["updateStudentForm"];
            initForm(oFormObject, selectedStudent);
        });

         //to populate the selected element to the form
        function initForm(form, data){
            Object.getOwnPropertyNames(data).forEach(function(item){
            var currentElem = form.elements[item.charAt(0).toUpperCase() + item.slice(1)];
            //console.log(currentElem);

            if( currentElem == null ){return;}

            if(currentElem.tagName == "SELECT"){
                var selectChildren = Array.from(currentElem.children);
                var matchedOpt = selectChildren.find(opt => opt.value == selectedStudent.departmentId);
            if(matchedOpt){
                matchedOpt.selected = true;
            }
            }else{
                form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value",data[item]); 
            }
            });
        }

        //after clicking update
        $("#updateStudent").click(function(){
            alertSaveChanges();
        });

        function proceedUpdate()
        {
            var arrData = {};

            //count the number of elements inside  the form
            var formelements = $("#updateStudentForm .form-group");

            //getting the data from the form
            var formInputs = $("#updateStudentForm").serializeArray();
            formInputs.forEach(function(item){
                arrData[item.name] = item.value;
            });

            arrData.studentId = selectedStudent.studentId;

            let emptyEl = new Boolean(false);
            //alternative of bool
            if(formInputs[0].value === '' || formInputs[2].value === '')
            {
                //if the firstname or lastname are empty then return true or 0
                emptyEl = Boolean(true);
            }
            else{
                //if the firstname and lastname are not empty then return false or 1
                emptyEl = Boolean(false);
            }

            //if all elements are not empty
            if(formInputs.length === formelements.length && emptyEl ===  Boolean(false))
            {
                //Call API to add Student
                $.ajax({
                    url: "../api/adminapi/updateStudent",
                    type: "POST",
                    data:
                    {
                        stud : arrData,
                    },
                })
                .done(function(result){
                    if(result === undefined || result === "" || result === null)
                    {
                        $("#updateStudentForm")[0].reset();
                        $("#modalStudentUpdate").modal("toggle");
                        alertSuccess();
                        loadStudentDetail();
                    }
                    else
                    {
                        alertError("This student is already created");
                    }
                });
            }
            else   
            {
                alertError("Input the necessary elements!");
            }
        }


        function loadStudentScheduleData()
        {
            //LOAD THE STUDENT'S STUDY LOAD
            $.ajax({
            url: "../api/pagestudentapi/loadStudentScheduleData",
            type: "POST",
            data:
            {
                studentId : userAuth.id,
            },
            }).done(function(result){
                
                if(result.length > 0)
                {
                    studentLoad = result;
                    console.log(studentLoad);
                    @* selectedInstructor = result;
                    //console.log(result.instructorFname);
                    $('.instructorName').text(result.instructorFname + " " + result.instructorLname); *@
                }
                else
                {
                    console.log("empty");
                }
                loadList();
                //populateTable();
            })
        }


        $("#btnSignout").click((e) =>{
            confirmLogout();
        });

        function proceedLogout()
        {
            sessionStorage.clear();
            window.location.href = "/Authorization/SigninStudent";
        }

        function loadList()
        {
            $.ajax("../api/adminapi/getSubjects").done(function(result){
                Subjects = result;
                console.log(result);
                //populateTable();
                //To avoid unexplainable bugs, we called populateTable here. After calling this from the api
                $.ajax("../api/adminapi/getSections").done(function(result){
                    Sections = result;
                    console.log(result);
                    //populateTable();

                    $.ajax("../api/adminapi/getRooms").done(function(result){
                        Rooms = result;
                        console.log(result);
                        //populateTable();

                        $.ajax("../api/adminapi/getTimeSlots").done(function(result){
                            Timeslots = result;
                            console.log(result);
                            //populateTable();
                            $.ajax("../api/adminapi/getAcademicYear").done(function(result){
                                AcadYears = result;
                                console.log(result);
                            });
                        });
                    });
                });
            });
        }


        //display update confirmation
        function alertSaveChanges()
        {
            Swal.fire({
                title: 'Do you want to save the changes?',
                showCancelButton: true,
                confirmButtonText: 'Save',
            }).then((result) => {
                if(result.isConfirmed){
                    proceedUpdate();
                }
            })
        }

        function confirmLogout()
        {
            Swal.fire({
                title: 'Are you sure you want to logout?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                confirmButtonColor: '#3085d6'
            }).then((result) => {
                if(result.isConfirmed){
                    proceedLogout();
                }
            })
        }

        //display confirm change password
        function alertConfirmChange()
        {
            Swal.fire({
                title: 'Do you really want to change your password?',
                showCancelButton: true,
                confirmButtonText: 'Save',
            }).then((result) => {
                if(result.isConfirmed){
                    proceedChangePass();
                }
            })
        }

        //display success action
        function alertSuccess()
        {
            Swal.fire({
                icon: 'success',
                title: 'Your work has been saved', 
                showConfirmButton: false,
                timer: 1500
            })
        }

        function alertError(message)
        {
            Swal.fire({
                icon: 'error',
                title: 'Error occured',
                text: message,
            })
        }

        //end of document.ready
    });
</script>