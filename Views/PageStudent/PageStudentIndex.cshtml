<!DOCTYPE html>
<html lang="en">
<header>
    
</header>
<body>
    <nav class="navbar bg-body-tertiary fixed-top">
    <div class="container-fluid">
        @* <a class="navbar-brand text-warning" href="#">M A T I K</a> *@
        <button class="navbar-toggler me-auto btn-black" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar" aria-label="Toggle navigation">
            <span class=""><i class="fa-solid fa-bars text-warning"></i></span>
            
        </button>
        <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
        <div class="offcanvas-header">
            <center><h5 class="offcanvas-title studentName" id="offcanvasNavbarLabel">Student X</h5></center>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle text-dark" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                User Settings
                </a>
                <ul class="dropdown-menu dropdown-menu-end dropdown-menu-lg-start">
                <li class="dropdown-item"><a class="nav-link btnUpdate">Change detail</a></li>
                <li class="dropdown-item"><a class="nav-link btnChangePass">Change password</a></li>
                </ul>
            </li>

            <br><br><br><br><br>
            <li class="nav-item">
                <a class="btn btn-warning" id="btnSignout">Signout</a>
            </li>
            </ul>
        </div>
        </div>
    </div>
    </nav>

    <br><br>
    <div><h4>Welcome, <span class="studentName"></span></h4></div>
    <hr>

    <!-- THIS IS FOR THE CONTENT OF THE PAGE-->
    <center><h1></h1></center>

    @Html.Partial("PageStudentUpdate")
    @Html.Partial("StudentChangePass")
    @Html.Partial("PageStudentTable")

    <div id="contentContainer">
        <!-- Existing content or future dynamic content goes here -->
    </div>
</body>
</html>

<script>
    $(document).ready(function(){
        margin();

        function margin(){
            $(".page-content").removeClass();
            $(".container-fluid.shared").removeClass();
            @* $(".bods").removeClass(); *@
        }
    });
</script>

<style>
    .navbar.shared{
        display: none;
    }

    .bods
    {
        color: white;
        background-color: white;
    }

    .btn-black {
    color: #000;
    background-color: maroon; /* Add this line to set the background color */
    border-color: gold; /* Add this line to set the border color */
    }

    @* body
    {
        color: black;
        background-color: black;
    } *@
</style>

<script>
    var studentLoad = {}; // this will hold all of the study loads of the student
    $(document).ready(function(){

        var storedUserAuth = sessionStorage.getItem('userauth');
        var userAuth = JSON.parse(storedUserAuth);

		if(userAuth === null)
        {
            window.location.href = "/Authorization/SigninStudent";
        }
        else if(userAuth.userType !== 'student')
        {
            if(userAuth.userType === 'admin')
            {
                window.location.href = "/Home/Index";
            }
            else if(userAuth.userType === 'instructor')
            {
                window.location.href = "/PageInstructor/PageInstructorIndex";
            }
        }

        var Subjects = {};
        var Rooms = {};
        var Sections = {};
        var Timeslots = {};
        var AcadYears = {};

        var acadVal = 0;
        var semVal = "";

        //this to display in the select as only once.
        var displaySelect = false;

        loadStudentDetail();
        //loadList();
        loadStudentScheduleData();
        populateAcademicYear();

        var selectedStudent;

        function loadStudentDetail()
        {
            //LOAD THE INSTRUCTOR DETAILS 
            $.ajax({
            url: "../api/pagestudentapi/loadUserDetail",
            type: "POST",
            data:
            {
                studentId : userAuth.id,
            },
            }).done(function(result){
                
                if(result != null)
                {
                    selectedStudent = result;
                    //console.log(result.instructorFname);
                    $('.studentName').text(result.studentFname + " " + result.studentLname);
                }
            })
        }

        $(".btnChangePass").click((e) => {
            $("#modalChangePass").modal("toggle");
        });

        //after clicking change password
        $("#passChange").click(function(){

            var currentPass = $("#inputCurrentPass").val();
            var newPass = $("#inputNewPass").val();
            var confirmPass = $("#inputConfirmPass").val();

            if(currentPass == "" || newPass == "" || confirmPass == "")
            {
                alertError("Complete the field first!");
            }
            else if(newPass !== confirmPass)
            {
                alertError("Password does not match!");
            }
            else
            {
                alertConfirmChange();
            }
        });

        function proceedChangePass()
        {

            var currentPass = $("#inputCurrentPass").val();
            var newPass = $("#inputNewPass").val();
            var confirmPass = $("#inputConfirmPass").val();

            $.ajax({
            url: "../api/authorizationapi/changeUserPass",
            type: "POST",
            data:
            {
                auth : userAuth,
                newP : newPass,
                currentP : currentPass,
            },
            })
            .done(function(result){

                if(result == "Invalid")
                {
                    alertError("Invalid password.");
                }
                else if(result == "Confirm")
                {
                    $("#passChangeForm")[0].reset();
                    $("#modalChangePass").modal("toggle");
                    alertSuccess();
                    loadStudentDetail();
                }
            });
        }


        //UPDATE STUDENT
        $(".btnUpdate").click((e) => {
            $("#modalStudentUpdate").modal("toggle");

            oFormObject = document.forms["updateStudentForm"];
            initForm(oFormObject, selectedStudent);
        });

         //to populate the selected element to the form
        function initForm(form, data){
            Object.getOwnPropertyNames(data).forEach(function(item){
            var currentElem = form.elements[item.charAt(0).toUpperCase() + item.slice(1)];
            //console.log(currentElem);

            if( currentElem == null ){return;}

            if(currentElem.tagName == "SELECT"){
                var selectChildren = Array.from(currentElem.children);
                var matchedOpt = selectChildren.find(opt => opt.value == selectedStudent.departmentId);
            if(matchedOpt){
                matchedOpt.selected = true;
            }
            }else{
                form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value",data[item]); 
            }
            });
        }

        //after clicking update
        $("#updateStudent").click(function(){
            alertSaveChanges();
        });

        function proceedUpdate()
        {
            var arrData = {};

            //count the number of elements inside  the form
            var formelements = $("#updateStudentForm .form-group");

            //getting the data from the form
            var formInputs = $("#updateStudentForm").serializeArray();
            formInputs.forEach(function(item){
                arrData[item.name] = item.value;
            });

            arrData.studentId = selectedStudent.studentId;

            let emptyEl = new Boolean(false);
            //alternative of bool
            if(formInputs[0].value === '' || formInputs[2].value === '')
            {
                //if the firstname or lastname are empty then return true or 0
                emptyEl = Boolean(true);
            }
            else{
                //if the firstname and lastname are not empty then return false or 1
                emptyEl = Boolean(false);
            }

            //if all elements are not empty
            if(formInputs.length === formelements.length && emptyEl ===  Boolean(false))
            {
                //Call API to add Student
                $.ajax({
                    url: "../api/adminapi/updateStudent",
                    type: "POST",
                    data:
                    {
                        stud : arrData,
                    },
                })
                .done(function(result){
                    if(result === undefined || result === "" || result === null)
                    {
                        $("#updateStudentForm")[0].reset();
                        $("#modalStudentUpdate").modal("toggle");
                        alertSuccess();
                        loadStudentDetail();
                    }
                    else
                    {
                        alertError("This student is already created");
                    }
                });
            }
            else   
            {
                alertError("Input the necessary elements!");
            }
        }


        function loadStudentScheduleData()
        {
            //LOAD THE STUDENT'S STUDY LOAD
            $.ajax({
            url: "../api/pagestudentapi/loadStudentScheduleData",
            type: "POST",
            data:
            {
                studentId : userAuth.id,
            },
            }).done(function(result){
                
                if(result.length > 0)
                {
                    studentLoad = result;
                    console.log(studentLoad);
                    @* selectedInstructor = result;
                    //console.log(result.instructorFname);
                    $('.instructorName').text(result.instructorFname + " " + result.instructorLname); *@
                }
                else
                {
                    console.log("empty");
                }
                loadList();
                //populateTable();
            })
        }

        //populate the academic year select options
        function populateAcademicYear()
        {
            $.ajax("../api/adminapi/getAcademicYear")
            .done(function(result){
            var template = document.querySelector("template#academicYearTemplate");
            var parent = document.querySelectorAll("#acadYearSelect");
            
            for(i = 0; i < parent.length; i++){
            result.forEach(function (item){
                var cloned = template.content.cloneNode(true);
                cloned.querySelector("option").value = item.acadYearId;
                cloned.querySelector("option").innerText = item.acadYearName;

                parent[i].prepend(cloned);
            });
            }

            //to deselect a selected option
            $("select").val([]);
            });
        }


        //function to populate the table
        function populateTable()
        {
            if(studentLoad.length > 0)
            {
                var defaultValue = "Undefined";
                
                //Convert the list into a schedule data
                var scheduleConvert = [];

                var SubjectList = Subjects;

                var holderStudentLoad = studentLoad;

                //Sorting order
                //Get the latest value of the academic year and semester
                holderStudentLoad.sort(function (a, b) {
                    // Compare acadYearId first
                    if (a.acadYearId !== b.acadYearId) {
                        return a.acadYearId - b.acadYearId;
                    }

                    // If acadYearId is the same, compare semester
                    if (a.semester < b.semester) {
                        return -1;
                    } else if (a.semester > b.semester) {
                        return 1;
                    }

                    // If acadYearId and semester are the same, maintain the current order
                    return 0;
                });

                //if the display is empty
                if(displaySelect == false)
                {
                    if(holderStudentLoad.length > 0)
                    {
                        var lastValue = holderStudentLoad[holderStudentLoad.length - 1];
                        //$("#acadYearSelect").val(lastValue.acadYearId).change();
                        $("#acadYearSelect").val(lastValue.acadYearId).prop('selected', true);
                        $("#semesterSelect").val(lastValue.semester).prop('selected', true);

                        displaySelect = true;

                        //To filter only the value that matches with the select options 
                        holderStudentLoad = studentLoad.filter(function (item) {
                            return item.acadYearId == lastValue.acadYearId && item.semester === lastValue.semester;
                        });
                        
                        //loadList();
                    }
                } 

                if(acadVal !== 0 && semVal !== "")
                {
                    //To refresh the value inside the holder instructor teaching load
                    holderStudentLoad = studentLoad;
                } 

                //Sort by academic year and semester
                if(acadVal !== 0 && semVal !== "")
                {
                    holderStudentLoad = studentLoad.filter(function (item) {
                        return item.acadYearId == acadVal && item.semester === semVal;
                    });

                    @* console.log("hello");
                    console.log(holderInstructorTeachingLoad); *@
                }

                if(holderStudentLoad.length > 0)
                {
                    holderStudentLoad.forEach(function (teachingLoad) {
                        //This is to convert the data of instructor teaching load to a displayable value

                        if(Subjects.length > 0)
                        {
                            var subjectUnitz = Subjects.find(sub => sub.subjectId == teachingLoad.subjectId) ?? defaultValue;
                        }

                        if(Timeslots.length > 0)
                        {
                            var timeVal = Timeslots.find(t => t.timeId == teachingLoad.timeId) ?? defaultValue;
                            console.log(timeVal);
                        }

                        var convertedData = {};

                        convertedData = {
                            subject: teachingLoad.subjectId,
                            unit: subjectUnitz.subjectUnit,
                            day: teachingLoad.day,
                            time: teachingLoad.timeId,
                            room: teachingLoad.roomId,
                        };
                        scheduleConvert.push(convertedData);
                    });

                    console.log(scheduleConvert);
                }


                if(holderStudentLoad.length > 0)
                {
                    // Get the tbody element where you want to append rows
                    var tbody = document.getElementById("scheduleBody");

                    // Group data by Section, Subject, and Room
                    var groupedData = {};
                    scheduleConvert.forEach(function (data) {
                    var key = data.subject + '-' + data.room;
                    if (!groupedData[key]) {
                        groupedData[key] = data;
                        groupedData[key].daySet = new Set();
                        groupedData[key].timeSet = new Set();
                    } else {
                        // Check if the day value already exists before pushing
                        @* if (!groupedData[key].daySet.has(data.day)) {
                            groupedData[key].day += ' , ' + data.day;
                            groupedData[key].daySet.add(data.day);
                        } *@


                        var uniqueDayRoomSchedules = scheduleConvert
                        .filter(rs =>
                            rs.subject === data.subject &&
                            rs.room === data.room
                        )
                        .map(rs => rs.day)
                        .filter((value, index, self) => self.indexOf(value) === index);

                        var dayConvert = "";
                        var dayCombined = "";

                        uniqueDayRoomSchedules.forEach(item => {
                            switch(item)
                            {
                                case 1:
                                    dayConvert = "M";
                                    break;
                                case 2:
                                    dayConvert = "T";
                                    break;
                                case 3:
                                    dayConvert = "W";
                                    break;
                                case 4:
                                    dayConvert = "TH";
                                    break;
                                case 5:
                                    dayConvert = "F";
                                    break;
                                case 6:
                                    dayConvert = "S";
                                    break;
                                case 7:
                                    dayConvert = "SUN";
                                    break;
                            }
                            dayCombined += dayConvert;
                        });

                        //Make the data of time, readable
                        var toPrintTime = scheduleConvert.filter(rs =>
                            rs.subject === data.subject &&
                            rs.room === data.room
                        );

                        //printing the time
                        var timeCount = toPrintTime.length;
                        var timeCounter = 0;

                        var startTime = "";
                        var endTime = "";

                        toPrintTime.forEach(item => {

                            timeCounter++;
                            if(Timeslots.length > 0)
                            {

                                var resTime = Timeslots.find(tm => tm.timeId == item.time) ?? defaultValue;
                                //console.log("I was called");

                                if(timeCounter == 1)
                                {
                                    if (resTime && typeof resTime.endTime === 'string') 
                                    {
                                        //Convert 24 hour format to 12 hour format
                                        // Parse the input time in HH:mm format
                                        var [hours, minutes] = resTime.startTime.split(':');
                                        // Convert to 12-hour format
                                        var period = hours >= 12 ? 'PM' : 'AM';
                                        hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                                        // Format the result as HH:mm AM/PM
                                        var time12 = hours + ':' + minutes + ' ' + period;

                                        //STORE IT
                                        startTime = time12;
                                    }
                                    else
                                    {
                                        //console.error("Invalid or undefined resTime.startTime");
                                    }

                                }
                                else if(timeCounter == timeCount)
                                {
                                    // Assuming resTime.endTime is expected to be a string in HH:mm format
                                    if (resTime && typeof resTime.endTime === 'string') {
                                        // Parse the input time in HH:mm format
                                        var [hours, minutes] = resTime.endTime.split(':');

                                        // Convert to 12-hour format
                                        var period = hours >= 12 ? 'PM' : 'AM';
                                        hours = hours % 12 || 12; // If hours is 0, set it to 12 for 12-hour format

                                        // Format the result as HH:mm AM/PM
                                        var time12 = hours + ':' + minutes + ' ' + period;

                                        // STORE IT
                                        endTime = time12;
                                    } else {
                                        //console.error("Invalid or undefined resTime.endTime");
                                    }
                                }
                            }   
                        });

                        //combine the time
                        var timeRange = startTime + " - " + endTime;
                        console.log(timeRange);
                        groupedData[key].timeSet.add(timeRange);
                        groupedData[key].daySet.add(dayCombined);
                        console.log(dayCombined);


                        @* if (!groupedData[key].timeSet.has(data.time)) {
                            //groupedData[key].time += ' - ' + data.time;
                            
                        } *@
                        //console.log(groupedData[key].timeSet);
                    }
                    });

                    // Get the tbody element where you want to append rows
                    var tbody = document.getElementById("scheduleBody");
                    tbody.innerHTML = "";

                    //Clear the "no teaching load data";
                    var newDiv = document.getElementById("mynewDiv");
                    newDiv.innerHTML = "";

                    // Iterate over groupedData and append rows to the table
                    Object.values(groupedData).forEach(function (data) {
                        var row = document.createElement("tr");
                        
                        //Convert id's into readable data
                        if(Subjects.length > 0)
                        {
                            var subjectVal = Subjects.find(sub => sub.subjectId == data.subject) ?? defaultValue;
                        }

                        if(Rooms.length > 0)
                        {
                            var roomVal = Rooms.find(sub => sub.roomId == data.room) ?? defaultValue;
                        }

                        //console.log(data.subject);
                        //console.log(subjectVal);
                        // Create and append cells with data
                        var firstValue = [...data.timeSet][0];
                        var firstValueDay = [...data.daySet][0];
                        console.log(firstValue);
                        row.appendChild(createCell(subjectVal.subjectName));
                        row.appendChild(createCell(data.unit));
                        row.appendChild(createCell(firstValueDay)); // Convert Set to array
                        row.appendChild(createCell(firstValue));
                        row.appendChild(createCell(roomVal.roomName));

                        // Append the row to the tbody
                        tbody.appendChild(row);
                    });
                }
                else
                {
                    //Clear the data first
                    var tbody = document.getElementById("scheduleBody");
                    tbody.innerHTML = "";

                    // Create a new div element
                    var newDiv = document.getElementById("mynewDiv");
                    //newDiv.id = 'myNewDiv';
                    newDiv.innerHTML = "";
                    newDiv.innerHTML = '<br><center>No student load data</center>';

                    // Append the new div to the content container
                    document.getElementById('contentContainer').appendChild(newDiv);
                }


            }
            else
            {
                //Clear the data first
                var tbody = document.getElementById("scheduleBody");
                tbody.innerHTML = "";

                // Create a new div element
                var newDiv = document.getElementById("mynewDiv");
                //newDiv.id = 'myNewDiv';
                newDiv.innerHTML = "";
                newDiv.innerHTML = '<br><center>No student load data</center>';

                // Append the new div to the content container
                document.getElementById('contentContainer').appendChild(newDiv);
            }
        }

        // Function to create a table cell
        function createCell(value) {
            var cell = document.createElement("td");
            cell.textContent = value;
            return cell;
        }

        // Academic Year dropdown change event
        $('#acadYearSelect').change(function () {
            var selectedAcad = $(this).val();
            var selectedSem = $('#semesterSelect').val();

            if(selectedAcad !== null && selectedSem !== null)
            {
                acadVal = selectedAcad;
                semVal = selectedSem;
                loadList();
            }
        });

        // Semester dropdown change event
        $('#semesterSelect').change(function () {
            var selectedSem = $(this).val();
            var selectedAcad = $('#acadYearSelect').val();

            if(selectedAcad !== null && selectedSem !== null)
            {
                acadVal = selectedAcad;
                semVal = selectedSem;
                loadList();
            }
        });


        $("#btnSignout").click((e) =>{
            confirmLogout();
        });

        function proceedLogout()
        {
            sessionStorage.clear();
            window.location.href = "/Authorization/SigninStudent";
        }

        function loadList()
        {
            $.ajax("../api/adminapi/getSubjects").done(function(result){
                Subjects = result;
                //populateTable();
                //To avoid unexplainable bugs, we called populateTable here. After calling this from the api
                $.ajax("../api/adminapi/getSections").done(function(result){
                    Sections = result;
                    //populateTable();

                    $.ajax("../api/adminapi/getRooms").done(function(result){
                        Rooms = result;
                        //populateTable();

                        $.ajax("../api/adminapi/getTimeSlots").done(function(result){
                            Timeslots = result;
                            //populateTable();
                            $.ajax("../api/adminapi/getAcademicYear").done(function(result){
                                AcadYears = result;
                                populateTable();
                            });
                        });
                    });
                });
            });
        }


        //display update confirmation
        function alertSaveChanges()
        {
            Swal.fire({
                title: 'Do you want to save the changes?',
                showCancelButton: true,
                confirmButtonText: 'Save',
            }).then((result) => {
                if(result.isConfirmed){
                    proceedUpdate();
                }
            })
        }

        function confirmLogout()
        {
            Swal.fire({
                title: 'Are you sure you want to logout?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                confirmButtonColor: '#3085d6'
            }).then((result) => {
                if(result.isConfirmed){
                    proceedLogout();
                }
            })
        }

        //display confirm change password
        function alertConfirmChange()
        {
            Swal.fire({
                title: 'Do you really want to change your password?',
                showCancelButton: true,
                confirmButtonText: 'Save',
            }).then((result) => {
                if(result.isConfirmed){
                    proceedChangePass();
                }
            })
        }

        //display success action
        function alertSuccess()
        {
            Swal.fire({
                icon: 'success',
                title: 'Your work has been saved', 
                showConfirmButton: false,
                timer: 1500
            })
        }

        function alertError(message)
        {
            Swal.fire({
                icon: 'error',
                title: 'Error occured',
                text: message,
            })
        }

        //end of document.ready
    });
</script>